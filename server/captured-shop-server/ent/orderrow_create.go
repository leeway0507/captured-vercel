// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/productinfo"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderRowCreate is the builder for creating a OrderRow entity.
type OrderRowCreate struct {
	config
	mutation *OrderRowMutation
	hooks    []Hook
}

// SetOrderID sets the "order_id" field.
func (orc *OrderRowCreate) SetOrderID(s string) *OrderRowCreate {
	orc.mutation.SetOrderID(s)
	return orc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (orc *OrderRowCreate) SetNillableOrderID(s *string) *OrderRowCreate {
	if s != nil {
		orc.SetOrderID(*s)
	}
	return orc
}

// SetSku sets the "sku" field.
func (orc *OrderRowCreate) SetSku(i int32) *OrderRowCreate {
	orc.mutation.SetSku(i)
	return orc
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (orc *OrderRowCreate) SetNillableSku(i *int32) *OrderRowCreate {
	if i != nil {
		orc.SetSku(*i)
	}
	return orc
}

// SetSize sets the "size" field.
func (orc *OrderRowCreate) SetSize(s string) *OrderRowCreate {
	orc.mutation.SetSize(s)
	return orc
}

// SetQuantity sets the "quantity" field.
func (orc *OrderRowCreate) SetQuantity(i int32) *OrderRowCreate {
	orc.mutation.SetQuantity(i)
	return orc
}

// SetDeliveryStatus sets the "delivery_status" field.
func (orc *OrderRowCreate) SetDeliveryStatus(s string) *OrderRowCreate {
	orc.mutation.SetDeliveryStatus(s)
	return orc
}

// SetDeliveryCompany sets the "delivery_company" field.
func (orc *OrderRowCreate) SetDeliveryCompany(s string) *OrderRowCreate {
	orc.mutation.SetDeliveryCompany(s)
	return orc
}

// SetNillableDeliveryCompany sets the "delivery_company" field if the given value is not nil.
func (orc *OrderRowCreate) SetNillableDeliveryCompany(s *string) *OrderRowCreate {
	if s != nil {
		orc.SetDeliveryCompany(*s)
	}
	return orc
}

// SetDeliveryNumber sets the "delivery_number" field.
func (orc *OrderRowCreate) SetDeliveryNumber(s string) *OrderRowCreate {
	orc.mutation.SetDeliveryNumber(s)
	return orc
}

// SetNillableDeliveryNumber sets the "delivery_number" field if the given value is not nil.
func (orc *OrderRowCreate) SetNillableDeliveryNumber(s *string) *OrderRowCreate {
	if s != nil {
		orc.SetDeliveryNumber(*s)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OrderRowCreate) SetID(i int32) *OrderRowCreate {
	orc.mutation.SetID(i)
	return orc
}

// SetOrderHistoryID sets the "order_history" edge to the OrderHistory entity by ID.
func (orc *OrderRowCreate) SetOrderHistoryID(id string) *OrderRowCreate {
	orc.mutation.SetOrderHistoryID(id)
	return orc
}

// SetNillableOrderHistoryID sets the "order_history" edge to the OrderHistory entity by ID if the given value is not nil.
func (orc *OrderRowCreate) SetNillableOrderHistoryID(id *string) *OrderRowCreate {
	if id != nil {
		orc = orc.SetOrderHistoryID(*id)
	}
	return orc
}

// SetOrderHistory sets the "order_history" edge to the OrderHistory entity.
func (orc *OrderRowCreate) SetOrderHistory(o *OrderHistory) *OrderRowCreate {
	return orc.SetOrderHistoryID(o.ID)
}

// SetProductInfoID sets the "product_info" edge to the ProductInfo entity by ID.
func (orc *OrderRowCreate) SetProductInfoID(id int32) *OrderRowCreate {
	orc.mutation.SetProductInfoID(id)
	return orc
}

// SetNillableProductInfoID sets the "product_info" edge to the ProductInfo entity by ID if the given value is not nil.
func (orc *OrderRowCreate) SetNillableProductInfoID(id *int32) *OrderRowCreate {
	if id != nil {
		orc = orc.SetProductInfoID(*id)
	}
	return orc
}

// SetProductInfo sets the "product_info" edge to the ProductInfo entity.
func (orc *OrderRowCreate) SetProductInfo(p *ProductInfo) *OrderRowCreate {
	return orc.SetProductInfoID(p.ID)
}

// Mutation returns the OrderRowMutation object of the builder.
func (orc *OrderRowCreate) Mutation() *OrderRowMutation {
	return orc.mutation
}

// Save creates the OrderRow in the database.
func (orc *OrderRowCreate) Save(ctx context.Context) (*OrderRow, error) {
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OrderRowCreate) SaveX(ctx context.Context) *OrderRow {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OrderRowCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OrderRowCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OrderRowCreate) check() error {
	if _, ok := orc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "OrderRow.size"`)}
	}
	if _, ok := orc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "OrderRow.quantity"`)}
	}
	if _, ok := orc.mutation.DeliveryStatus(); !ok {
		return &ValidationError{Name: "delivery_status", err: errors.New(`ent: missing required field "OrderRow.delivery_status"`)}
	}
	return nil
}

func (orc *OrderRowCreate) sqlSave(ctx context.Context) (*OrderRow, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OrderRowCreate) createSpec() (*OrderRow, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderRow{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(orderrow.Table, sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32))
	)
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := orc.mutation.Size(); ok {
		_spec.SetField(orderrow.FieldSize, field.TypeString, value)
		_node.Size = value
	}
	if value, ok := orc.mutation.Quantity(); ok {
		_spec.SetField(orderrow.FieldQuantity, field.TypeInt32, value)
		_node.Quantity = value
	}
	if value, ok := orc.mutation.DeliveryStatus(); ok {
		_spec.SetField(orderrow.FieldDeliveryStatus, field.TypeString, value)
		_node.DeliveryStatus = value
	}
	if value, ok := orc.mutation.DeliveryCompany(); ok {
		_spec.SetField(orderrow.FieldDeliveryCompany, field.TypeString, value)
		_node.DeliveryCompany = value
	}
	if value, ok := orc.mutation.DeliveryNumber(); ok {
		_spec.SetField(orderrow.FieldDeliveryNumber, field.TypeString, value)
		_node.DeliveryNumber = value
	}
	if nodes := orc.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.OrderHistoryTable,
			Columns: []string{orderrow.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.ProductInfoTable,
			Columns: []string{orderrow.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Sku = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderRowCreateBulk is the builder for creating many OrderRow entities in bulk.
type OrderRowCreateBulk struct {
	config
	err      error
	builders []*OrderRowCreate
}

// Save creates the OrderRow entities in the database.
func (orcb *OrderRowCreateBulk) Save(ctx context.Context) ([]*OrderRow, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OrderRow, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderRowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OrderRowCreateBulk) SaveX(ctx context.Context) []*OrderRow {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OrderRowCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OrderRowCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}
