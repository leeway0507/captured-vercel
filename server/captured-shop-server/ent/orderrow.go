// Code generated by ent, DO NOT EDIT.

package ent

import (
	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/productinfo"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderRow is the model entity for the OrderRow schema.
type OrderRow struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID string `json:"order_id,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku int32 `json:"sku,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int32 `json:"quantity,omitempty"`
	// DeliveryStatus holds the value of the "delivery_status" field.
	DeliveryStatus string `json:"delivery_status,omitempty"`
	// DeliveryCompany holds the value of the "delivery_company" field.
	DeliveryCompany string `json:"delivery_company,omitempty"`
	// DeliveryNumber holds the value of the "delivery_number" field.
	DeliveryNumber string `json:"delivery_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderRowQuery when eager-loading is set.
	Edges        OrderRowEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderRowEdges holds the relations/edges for other nodes in the graph.
type OrderRowEdges struct {
	// OrderHistory holds the value of the order_history edge.
	OrderHistory *OrderHistory `json:"order_history,omitempty"`
	// ProductInfo holds the value of the product_info edge.
	ProductInfo *ProductInfo `json:"product_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderHistoryOrErr returns the OrderHistory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderRowEdges) OrderHistoryOrErr() (*OrderHistory, error) {
	if e.loadedTypes[0] {
		if e.OrderHistory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: orderhistory.Label}
		}
		return e.OrderHistory, nil
	}
	return nil, &NotLoadedError{edge: "order_history"}
}

// ProductInfoOrErr returns the ProductInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderRowEdges) ProductInfoOrErr() (*ProductInfo, error) {
	if e.loadedTypes[1] {
		if e.ProductInfo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: productinfo.Label}
		}
		return e.ProductInfo, nil
	}
	return nil, &NotLoadedError{edge: "product_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderRow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderrow.FieldID, orderrow.FieldSku, orderrow.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case orderrow.FieldOrderID, orderrow.FieldSize, orderrow.FieldDeliveryStatus, orderrow.FieldDeliveryCompany, orderrow.FieldDeliveryNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderRow fields.
func (or *OrderRow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderrow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			or.ID = int32(value.Int64)
		case orderrow.FieldOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				or.OrderID = value.String
			}
		case orderrow.FieldSku:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				or.Sku = int32(value.Int64)
			}
		case orderrow.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				or.Size = value.String
			}
		case orderrow.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				or.Quantity = int32(value.Int64)
			}
		case orderrow.FieldDeliveryStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_status", values[i])
			} else if value.Valid {
				or.DeliveryStatus = value.String
			}
		case orderrow.FieldDeliveryCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_company", values[i])
			} else if value.Valid {
				or.DeliveryCompany = value.String
			}
		case orderrow.FieldDeliveryNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_number", values[i])
			} else if value.Valid {
				or.DeliveryNumber = value.String
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderRow.
// This includes values selected through modifiers, order, etc.
func (or *OrderRow) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QueryOrderHistory queries the "order_history" edge of the OrderRow entity.
func (or *OrderRow) QueryOrderHistory() *OrderHistoryQuery {
	return NewOrderRowClient(or.config).QueryOrderHistory(or)
}

// QueryProductInfo queries the "product_info" edge of the OrderRow entity.
func (or *OrderRow) QueryProductInfo() *ProductInfoQuery {
	return NewOrderRowClient(or.config).QueryProductInfo(or)
}

// Update returns a builder for updating this OrderRow.
// Note that you need to call OrderRow.Unwrap() before calling this method if this OrderRow
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OrderRow) Update() *OrderRowUpdateOne {
	return NewOrderRowClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OrderRow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OrderRow) Unwrap() *OrderRow {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderRow is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OrderRow) String() string {
	var builder strings.Builder
	builder.WriteString("OrderRow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("order_id=")
	builder.WriteString(or.OrderID)
	builder.WriteString(", ")
	builder.WriteString("sku=")
	builder.WriteString(fmt.Sprintf("%v", or.Sku))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(or.Size)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", or.Quantity))
	builder.WriteString(", ")
	builder.WriteString("delivery_status=")
	builder.WriteString(or.DeliveryStatus)
	builder.WriteString(", ")
	builder.WriteString("delivery_company=")
	builder.WriteString(or.DeliveryCompany)
	builder.WriteString(", ")
	builder.WriteString("delivery_number=")
	builder.WriteString(or.DeliveryNumber)
	builder.WriteByte(')')
	return builder.String()
}

// OrderRows is a parsable slice of OrderRow.
type OrderRows []*OrderRow
