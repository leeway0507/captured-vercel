// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/predicate"
	"product-server/ent/productinfo"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderRowUpdate is the builder for updating OrderRow entities.
type OrderRowUpdate struct {
	config
	hooks    []Hook
	mutation *OrderRowMutation
}

// Where appends a list predicates to the OrderRowUpdate builder.
func (oru *OrderRowUpdate) Where(ps ...predicate.OrderRow) *OrderRowUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetOrderID sets the "order_id" field.
func (oru *OrderRowUpdate) SetOrderID(s string) *OrderRowUpdate {
	oru.mutation.SetOrderID(s)
	return oru
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableOrderID(s *string) *OrderRowUpdate {
	if s != nil {
		oru.SetOrderID(*s)
	}
	return oru
}

// ClearOrderID clears the value of the "order_id" field.
func (oru *OrderRowUpdate) ClearOrderID() *OrderRowUpdate {
	oru.mutation.ClearOrderID()
	return oru
}

// SetSku sets the "sku" field.
func (oru *OrderRowUpdate) SetSku(i int32) *OrderRowUpdate {
	oru.mutation.SetSku(i)
	return oru
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableSku(i *int32) *OrderRowUpdate {
	if i != nil {
		oru.SetSku(*i)
	}
	return oru
}

// ClearSku clears the value of the "sku" field.
func (oru *OrderRowUpdate) ClearSku() *OrderRowUpdate {
	oru.mutation.ClearSku()
	return oru
}

// SetSize sets the "size" field.
func (oru *OrderRowUpdate) SetSize(s string) *OrderRowUpdate {
	oru.mutation.SetSize(s)
	return oru
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableSize(s *string) *OrderRowUpdate {
	if s != nil {
		oru.SetSize(*s)
	}
	return oru
}

// SetQuantity sets the "quantity" field.
func (oru *OrderRowUpdate) SetQuantity(i int32) *OrderRowUpdate {
	oru.mutation.ResetQuantity()
	oru.mutation.SetQuantity(i)
	return oru
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableQuantity(i *int32) *OrderRowUpdate {
	if i != nil {
		oru.SetQuantity(*i)
	}
	return oru
}

// AddQuantity adds i to the "quantity" field.
func (oru *OrderRowUpdate) AddQuantity(i int32) *OrderRowUpdate {
	oru.mutation.AddQuantity(i)
	return oru
}

// SetDeliveryStatus sets the "delivery_status" field.
func (oru *OrderRowUpdate) SetDeliveryStatus(s string) *OrderRowUpdate {
	oru.mutation.SetDeliveryStatus(s)
	return oru
}

// SetNillableDeliveryStatus sets the "delivery_status" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableDeliveryStatus(s *string) *OrderRowUpdate {
	if s != nil {
		oru.SetDeliveryStatus(*s)
	}
	return oru
}

// SetDeliveryCompany sets the "delivery_company" field.
func (oru *OrderRowUpdate) SetDeliveryCompany(s string) *OrderRowUpdate {
	oru.mutation.SetDeliveryCompany(s)
	return oru
}

// SetNillableDeliveryCompany sets the "delivery_company" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableDeliveryCompany(s *string) *OrderRowUpdate {
	if s != nil {
		oru.SetDeliveryCompany(*s)
	}
	return oru
}

// ClearDeliveryCompany clears the value of the "delivery_company" field.
func (oru *OrderRowUpdate) ClearDeliveryCompany() *OrderRowUpdate {
	oru.mutation.ClearDeliveryCompany()
	return oru
}

// SetDeliveryNumber sets the "delivery_number" field.
func (oru *OrderRowUpdate) SetDeliveryNumber(s string) *OrderRowUpdate {
	oru.mutation.SetDeliveryNumber(s)
	return oru
}

// SetNillableDeliveryNumber sets the "delivery_number" field if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableDeliveryNumber(s *string) *OrderRowUpdate {
	if s != nil {
		oru.SetDeliveryNumber(*s)
	}
	return oru
}

// ClearDeliveryNumber clears the value of the "delivery_number" field.
func (oru *OrderRowUpdate) ClearDeliveryNumber() *OrderRowUpdate {
	oru.mutation.ClearDeliveryNumber()
	return oru
}

// SetOrderHistoryID sets the "order_history" edge to the OrderHistory entity by ID.
func (oru *OrderRowUpdate) SetOrderHistoryID(id string) *OrderRowUpdate {
	oru.mutation.SetOrderHistoryID(id)
	return oru
}

// SetNillableOrderHistoryID sets the "order_history" edge to the OrderHistory entity by ID if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableOrderHistoryID(id *string) *OrderRowUpdate {
	if id != nil {
		oru = oru.SetOrderHistoryID(*id)
	}
	return oru
}

// SetOrderHistory sets the "order_history" edge to the OrderHistory entity.
func (oru *OrderRowUpdate) SetOrderHistory(o *OrderHistory) *OrderRowUpdate {
	return oru.SetOrderHistoryID(o.ID)
}

// SetProductInfoID sets the "product_info" edge to the ProductInfo entity by ID.
func (oru *OrderRowUpdate) SetProductInfoID(id int32) *OrderRowUpdate {
	oru.mutation.SetProductInfoID(id)
	return oru
}

// SetNillableProductInfoID sets the "product_info" edge to the ProductInfo entity by ID if the given value is not nil.
func (oru *OrderRowUpdate) SetNillableProductInfoID(id *int32) *OrderRowUpdate {
	if id != nil {
		oru = oru.SetProductInfoID(*id)
	}
	return oru
}

// SetProductInfo sets the "product_info" edge to the ProductInfo entity.
func (oru *OrderRowUpdate) SetProductInfo(p *ProductInfo) *OrderRowUpdate {
	return oru.SetProductInfoID(p.ID)
}

// Mutation returns the OrderRowMutation object of the builder.
func (oru *OrderRowUpdate) Mutation() *OrderRowMutation {
	return oru.mutation
}

// ClearOrderHistory clears the "order_history" edge to the OrderHistory entity.
func (oru *OrderRowUpdate) ClearOrderHistory() *OrderRowUpdate {
	oru.mutation.ClearOrderHistory()
	return oru
}

// ClearProductInfo clears the "product_info" edge to the ProductInfo entity.
func (oru *OrderRowUpdate) ClearProductInfo() *OrderRowUpdate {
	oru.mutation.ClearProductInfo()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OrderRowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OrderRowUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OrderRowUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OrderRowUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oru *OrderRowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderrow.Table, orderrow.Columns, sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.Size(); ok {
		_spec.SetField(orderrow.FieldSize, field.TypeString, value)
	}
	if value, ok := oru.mutation.Quantity(); ok {
		_spec.SetField(orderrow.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := oru.mutation.AddedQuantity(); ok {
		_spec.AddField(orderrow.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := oru.mutation.DeliveryStatus(); ok {
		_spec.SetField(orderrow.FieldDeliveryStatus, field.TypeString, value)
	}
	if value, ok := oru.mutation.DeliveryCompany(); ok {
		_spec.SetField(orderrow.FieldDeliveryCompany, field.TypeString, value)
	}
	if oru.mutation.DeliveryCompanyCleared() {
		_spec.ClearField(orderrow.FieldDeliveryCompany, field.TypeString)
	}
	if value, ok := oru.mutation.DeliveryNumber(); ok {
		_spec.SetField(orderrow.FieldDeliveryNumber, field.TypeString, value)
	}
	if oru.mutation.DeliveryNumberCleared() {
		_spec.ClearField(orderrow.FieldDeliveryNumber, field.TypeString)
	}
	if oru.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.OrderHistoryTable,
			Columns: []string{orderrow.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.OrderHistoryTable,
			Columns: []string{orderrow.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.ProductInfoTable,
			Columns: []string{orderrow.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.ProductInfoTable,
			Columns: []string{orderrow.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OrderRowUpdateOne is the builder for updating a single OrderRow entity.
type OrderRowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderRowMutation
}

// SetOrderID sets the "order_id" field.
func (oruo *OrderRowUpdateOne) SetOrderID(s string) *OrderRowUpdateOne {
	oruo.mutation.SetOrderID(s)
	return oruo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableOrderID(s *string) *OrderRowUpdateOne {
	if s != nil {
		oruo.SetOrderID(*s)
	}
	return oruo
}

// ClearOrderID clears the value of the "order_id" field.
func (oruo *OrderRowUpdateOne) ClearOrderID() *OrderRowUpdateOne {
	oruo.mutation.ClearOrderID()
	return oruo
}

// SetSku sets the "sku" field.
func (oruo *OrderRowUpdateOne) SetSku(i int32) *OrderRowUpdateOne {
	oruo.mutation.SetSku(i)
	return oruo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableSku(i *int32) *OrderRowUpdateOne {
	if i != nil {
		oruo.SetSku(*i)
	}
	return oruo
}

// ClearSku clears the value of the "sku" field.
func (oruo *OrderRowUpdateOne) ClearSku() *OrderRowUpdateOne {
	oruo.mutation.ClearSku()
	return oruo
}

// SetSize sets the "size" field.
func (oruo *OrderRowUpdateOne) SetSize(s string) *OrderRowUpdateOne {
	oruo.mutation.SetSize(s)
	return oruo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableSize(s *string) *OrderRowUpdateOne {
	if s != nil {
		oruo.SetSize(*s)
	}
	return oruo
}

// SetQuantity sets the "quantity" field.
func (oruo *OrderRowUpdateOne) SetQuantity(i int32) *OrderRowUpdateOne {
	oruo.mutation.ResetQuantity()
	oruo.mutation.SetQuantity(i)
	return oruo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableQuantity(i *int32) *OrderRowUpdateOne {
	if i != nil {
		oruo.SetQuantity(*i)
	}
	return oruo
}

// AddQuantity adds i to the "quantity" field.
func (oruo *OrderRowUpdateOne) AddQuantity(i int32) *OrderRowUpdateOne {
	oruo.mutation.AddQuantity(i)
	return oruo
}

// SetDeliveryStatus sets the "delivery_status" field.
func (oruo *OrderRowUpdateOne) SetDeliveryStatus(s string) *OrderRowUpdateOne {
	oruo.mutation.SetDeliveryStatus(s)
	return oruo
}

// SetNillableDeliveryStatus sets the "delivery_status" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableDeliveryStatus(s *string) *OrderRowUpdateOne {
	if s != nil {
		oruo.SetDeliveryStatus(*s)
	}
	return oruo
}

// SetDeliveryCompany sets the "delivery_company" field.
func (oruo *OrderRowUpdateOne) SetDeliveryCompany(s string) *OrderRowUpdateOne {
	oruo.mutation.SetDeliveryCompany(s)
	return oruo
}

// SetNillableDeliveryCompany sets the "delivery_company" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableDeliveryCompany(s *string) *OrderRowUpdateOne {
	if s != nil {
		oruo.SetDeliveryCompany(*s)
	}
	return oruo
}

// ClearDeliveryCompany clears the value of the "delivery_company" field.
func (oruo *OrderRowUpdateOne) ClearDeliveryCompany() *OrderRowUpdateOne {
	oruo.mutation.ClearDeliveryCompany()
	return oruo
}

// SetDeliveryNumber sets the "delivery_number" field.
func (oruo *OrderRowUpdateOne) SetDeliveryNumber(s string) *OrderRowUpdateOne {
	oruo.mutation.SetDeliveryNumber(s)
	return oruo
}

// SetNillableDeliveryNumber sets the "delivery_number" field if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableDeliveryNumber(s *string) *OrderRowUpdateOne {
	if s != nil {
		oruo.SetDeliveryNumber(*s)
	}
	return oruo
}

// ClearDeliveryNumber clears the value of the "delivery_number" field.
func (oruo *OrderRowUpdateOne) ClearDeliveryNumber() *OrderRowUpdateOne {
	oruo.mutation.ClearDeliveryNumber()
	return oruo
}

// SetOrderHistoryID sets the "order_history" edge to the OrderHistory entity by ID.
func (oruo *OrderRowUpdateOne) SetOrderHistoryID(id string) *OrderRowUpdateOne {
	oruo.mutation.SetOrderHistoryID(id)
	return oruo
}

// SetNillableOrderHistoryID sets the "order_history" edge to the OrderHistory entity by ID if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableOrderHistoryID(id *string) *OrderRowUpdateOne {
	if id != nil {
		oruo = oruo.SetOrderHistoryID(*id)
	}
	return oruo
}

// SetOrderHistory sets the "order_history" edge to the OrderHistory entity.
func (oruo *OrderRowUpdateOne) SetOrderHistory(o *OrderHistory) *OrderRowUpdateOne {
	return oruo.SetOrderHistoryID(o.ID)
}

// SetProductInfoID sets the "product_info" edge to the ProductInfo entity by ID.
func (oruo *OrderRowUpdateOne) SetProductInfoID(id int32) *OrderRowUpdateOne {
	oruo.mutation.SetProductInfoID(id)
	return oruo
}

// SetNillableProductInfoID sets the "product_info" edge to the ProductInfo entity by ID if the given value is not nil.
func (oruo *OrderRowUpdateOne) SetNillableProductInfoID(id *int32) *OrderRowUpdateOne {
	if id != nil {
		oruo = oruo.SetProductInfoID(*id)
	}
	return oruo
}

// SetProductInfo sets the "product_info" edge to the ProductInfo entity.
func (oruo *OrderRowUpdateOne) SetProductInfo(p *ProductInfo) *OrderRowUpdateOne {
	return oruo.SetProductInfoID(p.ID)
}

// Mutation returns the OrderRowMutation object of the builder.
func (oruo *OrderRowUpdateOne) Mutation() *OrderRowMutation {
	return oruo.mutation
}

// ClearOrderHistory clears the "order_history" edge to the OrderHistory entity.
func (oruo *OrderRowUpdateOne) ClearOrderHistory() *OrderRowUpdateOne {
	oruo.mutation.ClearOrderHistory()
	return oruo
}

// ClearProductInfo clears the "product_info" edge to the ProductInfo entity.
func (oruo *OrderRowUpdateOne) ClearProductInfo() *OrderRowUpdateOne {
	oruo.mutation.ClearProductInfo()
	return oruo
}

// Where appends a list predicates to the OrderRowUpdate builder.
func (oruo *OrderRowUpdateOne) Where(ps ...predicate.OrderRow) *OrderRowUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OrderRowUpdateOne) Select(field string, fields ...string) *OrderRowUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OrderRow entity.
func (oruo *OrderRowUpdateOne) Save(ctx context.Context) (*OrderRow, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OrderRowUpdateOne) SaveX(ctx context.Context) *OrderRow {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OrderRowUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OrderRowUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oruo *OrderRowUpdateOne) sqlSave(ctx context.Context) (_node *OrderRow, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderrow.Table, orderrow.Columns, sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderRow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderrow.FieldID)
		for _, f := range fields {
			if !orderrow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderrow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.Size(); ok {
		_spec.SetField(orderrow.FieldSize, field.TypeString, value)
	}
	if value, ok := oruo.mutation.Quantity(); ok {
		_spec.SetField(orderrow.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := oruo.mutation.AddedQuantity(); ok {
		_spec.AddField(orderrow.FieldQuantity, field.TypeInt32, value)
	}
	if value, ok := oruo.mutation.DeliveryStatus(); ok {
		_spec.SetField(orderrow.FieldDeliveryStatus, field.TypeString, value)
	}
	if value, ok := oruo.mutation.DeliveryCompany(); ok {
		_spec.SetField(orderrow.FieldDeliveryCompany, field.TypeString, value)
	}
	if oruo.mutation.DeliveryCompanyCleared() {
		_spec.ClearField(orderrow.FieldDeliveryCompany, field.TypeString)
	}
	if value, ok := oruo.mutation.DeliveryNumber(); ok {
		_spec.SetField(orderrow.FieldDeliveryNumber, field.TypeString, value)
	}
	if oruo.mutation.DeliveryNumberCleared() {
		_spec.ClearField(orderrow.FieldDeliveryNumber, field.TypeString)
	}
	if oruo.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.OrderHistoryTable,
			Columns: []string{orderrow.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.OrderHistoryTable,
			Columns: []string{orderrow.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.ProductInfoTable,
			Columns: []string{orderrow.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrow.ProductInfoTable,
			Columns: []string{orderrow.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderRow{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
