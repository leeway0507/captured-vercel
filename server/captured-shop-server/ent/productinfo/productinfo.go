// Code generated by ent, DO NOT EDIT.

package productinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productinfo type in the database.
	Label = "product_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "sku"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldShippingFee holds the string denoting the shipping_fee field in the database.
	FieldShippingFee = "shipping_fee"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldIntl holds the string denoting the intl field in the database.
	FieldIntl = "intl"
	// FieldSearchInfo holds the string denoting the search_info field in the database.
	FieldSearchInfo = "search_info"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldCategorySpec holds the string denoting the category_spec field in the database.
	FieldCategorySpec = "category_spec"
	// FieldImgType holds the string denoting the img_type field in the database.
	FieldImgType = "img_type"
	// FieldPriceDescCursor holds the string denoting the price_desc_cursor field in the database.
	FieldPriceDescCursor = "price_desc_cursor"
	// FieldPriceAscCursor holds the string denoting the price_asc_cursor field in the database.
	FieldPriceAscCursor = "price_asc_cursor"
	// FieldDeploy holds the string denoting the deploy field in the database.
	FieldDeploy = "deploy"
	// FieldKorProductName holds the string denoting the kor_product_name field in the database.
	FieldKorProductName = "kor_product_name"
	// FieldKorBrand holds the string denoting the kor_brand field in the database.
	FieldKorBrand = "kor_brand"
	// EdgeOrderRows holds the string denoting the order_rows edge name in mutations.
	EdgeOrderRows = "order_rows"
	// EdgeSizes holds the string denoting the sizes edge name in mutations.
	EdgeSizes = "sizes"
	// OrderRowFieldID holds the string denoting the ID field of the OrderRow.
	OrderRowFieldID = "order_row_id"
	// SizeFieldID holds the string denoting the ID field of the Size.
	SizeFieldID = "size_id"
	// Table holds the table name of the productinfo in the database.
	Table = "product_info"
	// OrderRowsTable is the table that holds the order_rows relation/edge.
	OrderRowsTable = "order_row"
	// OrderRowsInverseTable is the table name for the OrderRow entity.
	// It exists in this package in order to avoid circular dependency with the "orderrow" package.
	OrderRowsInverseTable = "order_row"
	// OrderRowsColumn is the table column denoting the order_rows relation/edge.
	OrderRowsColumn = "sku"
	// SizesTable is the table that holds the sizes relation/edge.
	SizesTable = "size"
	// SizesInverseTable is the table name for the Size entity.
	// It exists in this package in order to avoid circular dependency with the "size" package.
	SizesInverseTable = "size"
	// SizesColumn is the table column denoting the sizes relation/edge.
	SizesColumn = "sku"
)

// Columns holds all SQL columns for productinfo fields.
var Columns = []string{
	FieldID,
	FieldBrand,
	FieldProductName,
	FieldProductID,
	FieldShippingFee,
	FieldPrice,
	FieldIntl,
	FieldSearchInfo,
	FieldColor,
	FieldCategory,
	FieldCategorySpec,
	FieldImgType,
	FieldPriceDescCursor,
	FieldPriceAscCursor,
	FieldDeploy,
	FieldKorProductName,
	FieldKorBrand,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProductInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByProductName orders the results by the product_name field.
func ByProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductName, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByShippingFee orders the results by the shipping_fee field.
func ByShippingFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingFee, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByIntl orders the results by the intl field.
func ByIntl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntl, opts...).ToFunc()
}

// BySearchInfo orders the results by the search_info field.
func BySearchInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearchInfo, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByCategorySpec orders the results by the category_spec field.
func ByCategorySpec(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategorySpec, opts...).ToFunc()
}

// ByImgType orders the results by the img_type field.
func ByImgType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgType, opts...).ToFunc()
}

// ByPriceDescCursor orders the results by the price_desc_cursor field.
func ByPriceDescCursor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceDescCursor, opts...).ToFunc()
}

// ByPriceAscCursor orders the results by the price_asc_cursor field.
func ByPriceAscCursor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceAscCursor, opts...).ToFunc()
}

// ByDeploy orders the results by the deploy field.
func ByDeploy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploy, opts...).ToFunc()
}

// ByKorProductName orders the results by the kor_product_name field.
func ByKorProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKorProductName, opts...).ToFunc()
}

// ByKorBrand orders the results by the kor_brand field.
func ByKorBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKorBrand, opts...).ToFunc()
}

// ByOrderRowsCount orders the results by order_rows count.
func ByOrderRowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderRowsStep(), opts...)
	}
}

// ByOrderRows orders the results by order_rows terms.
func ByOrderRows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderRowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySizesCount orders the results by sizes count.
func BySizesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSizesStep(), opts...)
	}
}

// BySizes orders the results by sizes terms.
func BySizes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSizesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrderRowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderRowsInverseTable, OrderRowFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderRowsTable, OrderRowsColumn),
	)
}
func newSizesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SizesInverseTable, SizeFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SizesTable, SizesColumn),
	)
}
