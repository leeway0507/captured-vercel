// Code generated by ent, DO NOT EDIT.

package productinfo

import (
	"product-server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldID, id))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldBrand, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldProductName, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldProductID, v))
}

// ShippingFee applies equality check predicate on the "shipping_fee" field. It's identical to ShippingFeeEQ.
func ShippingFee(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldShippingFee, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldPrice, v))
}

// Intl applies equality check predicate on the "intl" field. It's identical to IntlEQ.
func Intl(v bool) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldIntl, v))
}

// SearchInfo applies equality check predicate on the "search_info" field. It's identical to SearchInfoEQ.
func SearchInfo(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldSearchInfo, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldColor, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldCategory, v))
}

// CategorySpec applies equality check predicate on the "category_spec" field. It's identical to CategorySpecEQ.
func CategorySpec(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldCategorySpec, v))
}

// ImgType applies equality check predicate on the "img_type" field. It's identical to ImgTypeEQ.
func ImgType(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldImgType, v))
}

// PriceDescCursor applies equality check predicate on the "price_desc_cursor" field. It's identical to PriceDescCursorEQ.
func PriceDescCursor(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldPriceDescCursor, v))
}

// PriceAscCursor applies equality check predicate on the "price_asc_cursor" field. It's identical to PriceAscCursorEQ.
func PriceAscCursor(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldPriceAscCursor, v))
}

// Deploy applies equality check predicate on the "deploy" field. It's identical to DeployEQ.
func Deploy(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldDeploy, v))
}

// KorProductName applies equality check predicate on the "kor_product_name" field. It's identical to KorProductNameEQ.
func KorProductName(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldKorProductName, v))
}

// KorBrand applies equality check predicate on the "kor_brand" field. It's identical to KorBrandEQ.
func KorBrand(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldKorBrand, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandIsNil applies the IsNil predicate on the "brand" field.
func BrandIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldBrand))
}

// BrandNotNil applies the NotNil predicate on the "brand" field.
func BrandNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldBrand))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldBrand, v))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameIsNil applies the IsNil predicate on the "product_name" field.
func ProductNameIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldProductName))
}

// ProductNameNotNil applies the NotNil predicate on the "product_name" field.
func ProductNameNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldProductName))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldProductName, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldProductID))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldProductID, v))
}

// ShippingFeeEQ applies the EQ predicate on the "shipping_fee" field.
func ShippingFeeEQ(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldShippingFee, v))
}

// ShippingFeeNEQ applies the NEQ predicate on the "shipping_fee" field.
func ShippingFeeNEQ(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldShippingFee, v))
}

// ShippingFeeIn applies the In predicate on the "shipping_fee" field.
func ShippingFeeIn(vs ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldShippingFee, vs...))
}

// ShippingFeeNotIn applies the NotIn predicate on the "shipping_fee" field.
func ShippingFeeNotIn(vs ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldShippingFee, vs...))
}

// ShippingFeeGT applies the GT predicate on the "shipping_fee" field.
func ShippingFeeGT(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldShippingFee, v))
}

// ShippingFeeGTE applies the GTE predicate on the "shipping_fee" field.
func ShippingFeeGTE(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldShippingFee, v))
}

// ShippingFeeLT applies the LT predicate on the "shipping_fee" field.
func ShippingFeeLT(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldShippingFee, v))
}

// ShippingFeeLTE applies the LTE predicate on the "shipping_fee" field.
func ShippingFeeLTE(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldShippingFee, v))
}

// ShippingFeeIsNil applies the IsNil predicate on the "shipping_fee" field.
func ShippingFeeIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldShippingFee))
}

// ShippingFeeNotNil applies the NotNil predicate on the "shipping_fee" field.
func ShippingFeeNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldShippingFee))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldPrice))
}

// IntlEQ applies the EQ predicate on the "intl" field.
func IntlEQ(v bool) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldIntl, v))
}

// IntlNEQ applies the NEQ predicate on the "intl" field.
func IntlNEQ(v bool) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldIntl, v))
}

// IntlIsNil applies the IsNil predicate on the "intl" field.
func IntlIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldIntl))
}

// IntlNotNil applies the NotNil predicate on the "intl" field.
func IntlNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldIntl))
}

// SearchInfoEQ applies the EQ predicate on the "search_info" field.
func SearchInfoEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldSearchInfo, v))
}

// SearchInfoNEQ applies the NEQ predicate on the "search_info" field.
func SearchInfoNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldSearchInfo, v))
}

// SearchInfoIn applies the In predicate on the "search_info" field.
func SearchInfoIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldSearchInfo, vs...))
}

// SearchInfoNotIn applies the NotIn predicate on the "search_info" field.
func SearchInfoNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldSearchInfo, vs...))
}

// SearchInfoGT applies the GT predicate on the "search_info" field.
func SearchInfoGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldSearchInfo, v))
}

// SearchInfoGTE applies the GTE predicate on the "search_info" field.
func SearchInfoGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldSearchInfo, v))
}

// SearchInfoLT applies the LT predicate on the "search_info" field.
func SearchInfoLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldSearchInfo, v))
}

// SearchInfoLTE applies the LTE predicate on the "search_info" field.
func SearchInfoLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldSearchInfo, v))
}

// SearchInfoContains applies the Contains predicate on the "search_info" field.
func SearchInfoContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldSearchInfo, v))
}

// SearchInfoHasPrefix applies the HasPrefix predicate on the "search_info" field.
func SearchInfoHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldSearchInfo, v))
}

// SearchInfoHasSuffix applies the HasSuffix predicate on the "search_info" field.
func SearchInfoHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldSearchInfo, v))
}

// SearchInfoIsNil applies the IsNil predicate on the "search_info" field.
func SearchInfoIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldSearchInfo))
}

// SearchInfoNotNil applies the NotNil predicate on the "search_info" field.
func SearchInfoNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldSearchInfo))
}

// SearchInfoEqualFold applies the EqualFold predicate on the "search_info" field.
func SearchInfoEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldSearchInfo, v))
}

// SearchInfoContainsFold applies the ContainsFold predicate on the "search_info" field.
func SearchInfoContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldSearchInfo, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldColor, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldCategory, v))
}

// CategorySpecEQ applies the EQ predicate on the "category_spec" field.
func CategorySpecEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldCategorySpec, v))
}

// CategorySpecNEQ applies the NEQ predicate on the "category_spec" field.
func CategorySpecNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldCategorySpec, v))
}

// CategorySpecIn applies the In predicate on the "category_spec" field.
func CategorySpecIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldCategorySpec, vs...))
}

// CategorySpecNotIn applies the NotIn predicate on the "category_spec" field.
func CategorySpecNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldCategorySpec, vs...))
}

// CategorySpecGT applies the GT predicate on the "category_spec" field.
func CategorySpecGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldCategorySpec, v))
}

// CategorySpecGTE applies the GTE predicate on the "category_spec" field.
func CategorySpecGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldCategorySpec, v))
}

// CategorySpecLT applies the LT predicate on the "category_spec" field.
func CategorySpecLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldCategorySpec, v))
}

// CategorySpecLTE applies the LTE predicate on the "category_spec" field.
func CategorySpecLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldCategorySpec, v))
}

// CategorySpecContains applies the Contains predicate on the "category_spec" field.
func CategorySpecContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldCategorySpec, v))
}

// CategorySpecHasPrefix applies the HasPrefix predicate on the "category_spec" field.
func CategorySpecHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldCategorySpec, v))
}

// CategorySpecHasSuffix applies the HasSuffix predicate on the "category_spec" field.
func CategorySpecHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldCategorySpec, v))
}

// CategorySpecIsNil applies the IsNil predicate on the "category_spec" field.
func CategorySpecIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldCategorySpec))
}

// CategorySpecNotNil applies the NotNil predicate on the "category_spec" field.
func CategorySpecNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldCategorySpec))
}

// CategorySpecEqualFold applies the EqualFold predicate on the "category_spec" field.
func CategorySpecEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldCategorySpec, v))
}

// CategorySpecContainsFold applies the ContainsFold predicate on the "category_spec" field.
func CategorySpecContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldCategorySpec, v))
}

// ImgTypeEQ applies the EQ predicate on the "img_type" field.
func ImgTypeEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldImgType, v))
}

// ImgTypeNEQ applies the NEQ predicate on the "img_type" field.
func ImgTypeNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldImgType, v))
}

// ImgTypeIn applies the In predicate on the "img_type" field.
func ImgTypeIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldImgType, vs...))
}

// ImgTypeNotIn applies the NotIn predicate on the "img_type" field.
func ImgTypeNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldImgType, vs...))
}

// ImgTypeGT applies the GT predicate on the "img_type" field.
func ImgTypeGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldImgType, v))
}

// ImgTypeGTE applies the GTE predicate on the "img_type" field.
func ImgTypeGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldImgType, v))
}

// ImgTypeLT applies the LT predicate on the "img_type" field.
func ImgTypeLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldImgType, v))
}

// ImgTypeLTE applies the LTE predicate on the "img_type" field.
func ImgTypeLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldImgType, v))
}

// ImgTypeContains applies the Contains predicate on the "img_type" field.
func ImgTypeContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldImgType, v))
}

// ImgTypeHasPrefix applies the HasPrefix predicate on the "img_type" field.
func ImgTypeHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldImgType, v))
}

// ImgTypeHasSuffix applies the HasSuffix predicate on the "img_type" field.
func ImgTypeHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldImgType, v))
}

// ImgTypeIsNil applies the IsNil predicate on the "img_type" field.
func ImgTypeIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldImgType))
}

// ImgTypeNotNil applies the NotNil predicate on the "img_type" field.
func ImgTypeNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldImgType))
}

// ImgTypeEqualFold applies the EqualFold predicate on the "img_type" field.
func ImgTypeEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldImgType, v))
}

// ImgTypeContainsFold applies the ContainsFold predicate on the "img_type" field.
func ImgTypeContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldImgType, v))
}

// PriceDescCursorEQ applies the EQ predicate on the "price_desc_cursor" field.
func PriceDescCursorEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldPriceDescCursor, v))
}

// PriceDescCursorNEQ applies the NEQ predicate on the "price_desc_cursor" field.
func PriceDescCursorNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldPriceDescCursor, v))
}

// PriceDescCursorIn applies the In predicate on the "price_desc_cursor" field.
func PriceDescCursorIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldPriceDescCursor, vs...))
}

// PriceDescCursorNotIn applies the NotIn predicate on the "price_desc_cursor" field.
func PriceDescCursorNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldPriceDescCursor, vs...))
}

// PriceDescCursorGT applies the GT predicate on the "price_desc_cursor" field.
func PriceDescCursorGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldPriceDescCursor, v))
}

// PriceDescCursorGTE applies the GTE predicate on the "price_desc_cursor" field.
func PriceDescCursorGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldPriceDescCursor, v))
}

// PriceDescCursorLT applies the LT predicate on the "price_desc_cursor" field.
func PriceDescCursorLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldPriceDescCursor, v))
}

// PriceDescCursorLTE applies the LTE predicate on the "price_desc_cursor" field.
func PriceDescCursorLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldPriceDescCursor, v))
}

// PriceDescCursorContains applies the Contains predicate on the "price_desc_cursor" field.
func PriceDescCursorContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldPriceDescCursor, v))
}

// PriceDescCursorHasPrefix applies the HasPrefix predicate on the "price_desc_cursor" field.
func PriceDescCursorHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldPriceDescCursor, v))
}

// PriceDescCursorHasSuffix applies the HasSuffix predicate on the "price_desc_cursor" field.
func PriceDescCursorHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldPriceDescCursor, v))
}

// PriceDescCursorIsNil applies the IsNil predicate on the "price_desc_cursor" field.
func PriceDescCursorIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldPriceDescCursor))
}

// PriceDescCursorNotNil applies the NotNil predicate on the "price_desc_cursor" field.
func PriceDescCursorNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldPriceDescCursor))
}

// PriceDescCursorEqualFold applies the EqualFold predicate on the "price_desc_cursor" field.
func PriceDescCursorEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldPriceDescCursor, v))
}

// PriceDescCursorContainsFold applies the ContainsFold predicate on the "price_desc_cursor" field.
func PriceDescCursorContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldPriceDescCursor, v))
}

// PriceAscCursorEQ applies the EQ predicate on the "price_asc_cursor" field.
func PriceAscCursorEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldPriceAscCursor, v))
}

// PriceAscCursorNEQ applies the NEQ predicate on the "price_asc_cursor" field.
func PriceAscCursorNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldPriceAscCursor, v))
}

// PriceAscCursorIn applies the In predicate on the "price_asc_cursor" field.
func PriceAscCursorIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldPriceAscCursor, vs...))
}

// PriceAscCursorNotIn applies the NotIn predicate on the "price_asc_cursor" field.
func PriceAscCursorNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldPriceAscCursor, vs...))
}

// PriceAscCursorGT applies the GT predicate on the "price_asc_cursor" field.
func PriceAscCursorGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldPriceAscCursor, v))
}

// PriceAscCursorGTE applies the GTE predicate on the "price_asc_cursor" field.
func PriceAscCursorGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldPriceAscCursor, v))
}

// PriceAscCursorLT applies the LT predicate on the "price_asc_cursor" field.
func PriceAscCursorLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldPriceAscCursor, v))
}

// PriceAscCursorLTE applies the LTE predicate on the "price_asc_cursor" field.
func PriceAscCursorLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldPriceAscCursor, v))
}

// PriceAscCursorContains applies the Contains predicate on the "price_asc_cursor" field.
func PriceAscCursorContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldPriceAscCursor, v))
}

// PriceAscCursorHasPrefix applies the HasPrefix predicate on the "price_asc_cursor" field.
func PriceAscCursorHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldPriceAscCursor, v))
}

// PriceAscCursorHasSuffix applies the HasSuffix predicate on the "price_asc_cursor" field.
func PriceAscCursorHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldPriceAscCursor, v))
}

// PriceAscCursorIsNil applies the IsNil predicate on the "price_asc_cursor" field.
func PriceAscCursorIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldPriceAscCursor))
}

// PriceAscCursorNotNil applies the NotNil predicate on the "price_asc_cursor" field.
func PriceAscCursorNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldPriceAscCursor))
}

// PriceAscCursorEqualFold applies the EqualFold predicate on the "price_asc_cursor" field.
func PriceAscCursorEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldPriceAscCursor, v))
}

// PriceAscCursorContainsFold applies the ContainsFold predicate on the "price_asc_cursor" field.
func PriceAscCursorContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldPriceAscCursor, v))
}

// DeployEQ applies the EQ predicate on the "deploy" field.
func DeployEQ(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldDeploy, v))
}

// DeployNEQ applies the NEQ predicate on the "deploy" field.
func DeployNEQ(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldDeploy, v))
}

// DeployIn applies the In predicate on the "deploy" field.
func DeployIn(vs ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldDeploy, vs...))
}

// DeployNotIn applies the NotIn predicate on the "deploy" field.
func DeployNotIn(vs ...int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldDeploy, vs...))
}

// DeployGT applies the GT predicate on the "deploy" field.
func DeployGT(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldDeploy, v))
}

// DeployGTE applies the GTE predicate on the "deploy" field.
func DeployGTE(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldDeploy, v))
}

// DeployLT applies the LT predicate on the "deploy" field.
func DeployLT(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldDeploy, v))
}

// DeployLTE applies the LTE predicate on the "deploy" field.
func DeployLTE(v int32) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldDeploy, v))
}

// DeployIsNil applies the IsNil predicate on the "deploy" field.
func DeployIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldDeploy))
}

// DeployNotNil applies the NotNil predicate on the "deploy" field.
func DeployNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldDeploy))
}

// KorProductNameEQ applies the EQ predicate on the "kor_product_name" field.
func KorProductNameEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldKorProductName, v))
}

// KorProductNameNEQ applies the NEQ predicate on the "kor_product_name" field.
func KorProductNameNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldKorProductName, v))
}

// KorProductNameIn applies the In predicate on the "kor_product_name" field.
func KorProductNameIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldKorProductName, vs...))
}

// KorProductNameNotIn applies the NotIn predicate on the "kor_product_name" field.
func KorProductNameNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldKorProductName, vs...))
}

// KorProductNameGT applies the GT predicate on the "kor_product_name" field.
func KorProductNameGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldKorProductName, v))
}

// KorProductNameGTE applies the GTE predicate on the "kor_product_name" field.
func KorProductNameGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldKorProductName, v))
}

// KorProductNameLT applies the LT predicate on the "kor_product_name" field.
func KorProductNameLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldKorProductName, v))
}

// KorProductNameLTE applies the LTE predicate on the "kor_product_name" field.
func KorProductNameLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldKorProductName, v))
}

// KorProductNameContains applies the Contains predicate on the "kor_product_name" field.
func KorProductNameContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldKorProductName, v))
}

// KorProductNameHasPrefix applies the HasPrefix predicate on the "kor_product_name" field.
func KorProductNameHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldKorProductName, v))
}

// KorProductNameHasSuffix applies the HasSuffix predicate on the "kor_product_name" field.
func KorProductNameHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldKorProductName, v))
}

// KorProductNameIsNil applies the IsNil predicate on the "kor_product_name" field.
func KorProductNameIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldKorProductName))
}

// KorProductNameNotNil applies the NotNil predicate on the "kor_product_name" field.
func KorProductNameNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldKorProductName))
}

// KorProductNameEqualFold applies the EqualFold predicate on the "kor_product_name" field.
func KorProductNameEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldKorProductName, v))
}

// KorProductNameContainsFold applies the ContainsFold predicate on the "kor_product_name" field.
func KorProductNameContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldKorProductName, v))
}

// KorBrandEQ applies the EQ predicate on the "kor_brand" field.
func KorBrandEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEQ(FieldKorBrand, v))
}

// KorBrandNEQ applies the NEQ predicate on the "kor_brand" field.
func KorBrandNEQ(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNEQ(FieldKorBrand, v))
}

// KorBrandIn applies the In predicate on the "kor_brand" field.
func KorBrandIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIn(FieldKorBrand, vs...))
}

// KorBrandNotIn applies the NotIn predicate on the "kor_brand" field.
func KorBrandNotIn(vs ...string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotIn(FieldKorBrand, vs...))
}

// KorBrandGT applies the GT predicate on the "kor_brand" field.
func KorBrandGT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGT(FieldKorBrand, v))
}

// KorBrandGTE applies the GTE predicate on the "kor_brand" field.
func KorBrandGTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldGTE(FieldKorBrand, v))
}

// KorBrandLT applies the LT predicate on the "kor_brand" field.
func KorBrandLT(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLT(FieldKorBrand, v))
}

// KorBrandLTE applies the LTE predicate on the "kor_brand" field.
func KorBrandLTE(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldLTE(FieldKorBrand, v))
}

// KorBrandContains applies the Contains predicate on the "kor_brand" field.
func KorBrandContains(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContains(FieldKorBrand, v))
}

// KorBrandHasPrefix applies the HasPrefix predicate on the "kor_brand" field.
func KorBrandHasPrefix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasPrefix(FieldKorBrand, v))
}

// KorBrandHasSuffix applies the HasSuffix predicate on the "kor_brand" field.
func KorBrandHasSuffix(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldHasSuffix(FieldKorBrand, v))
}

// KorBrandIsNil applies the IsNil predicate on the "kor_brand" field.
func KorBrandIsNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldIsNull(FieldKorBrand))
}

// KorBrandNotNil applies the NotNil predicate on the "kor_brand" field.
func KorBrandNotNil() predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldNotNull(FieldKorBrand))
}

// KorBrandEqualFold applies the EqualFold predicate on the "kor_brand" field.
func KorBrandEqualFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldEqualFold(FieldKorBrand, v))
}

// KorBrandContainsFold applies the ContainsFold predicate on the "kor_brand" field.
func KorBrandContainsFold(v string) predicate.ProductInfo {
	return predicate.ProductInfo(sql.FieldContainsFold(FieldKorBrand, v))
}

// HasOrderRows applies the HasEdge predicate on the "order_rows" edge.
func HasOrderRows() predicate.ProductInfo {
	return predicate.ProductInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderRowsTable, OrderRowsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderRowsWith applies the HasEdge predicate on the "order_rows" edge with a given conditions (other predicates).
func HasOrderRowsWith(preds ...predicate.OrderRow) predicate.ProductInfo {
	return predicate.ProductInfo(func(s *sql.Selector) {
		step := newOrderRowsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSizes applies the HasEdge predicate on the "sizes" edge.
func HasSizes() predicate.ProductInfo {
	return predicate.ProductInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SizesTable, SizesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSizesWith applies the HasEdge predicate on the "sizes" edge with a given conditions (other predicates).
func HasSizesWith(preds ...predicate.Size) predicate.ProductInfo {
	return predicate.ProductInfo(func(s *sql.Selector) {
		step := newSizesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductInfo) predicate.ProductInfo {
	return predicate.ProductInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductInfo) predicate.ProductInfo {
	return predicate.ProductInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductInfo) predicate.ProductInfo {
	return predicate.ProductInfo(sql.NotPredicates(p))
}
