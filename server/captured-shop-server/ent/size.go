// Code generated by ent, DO NOT EDIT.

package ent

import (
	"product-server/ent/productinfo"
	"product-server/ent/size"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Size is the model entity for the Size schema.
type Size struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku int32 `json:"sku,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Available holds the value of the "available" field.
	Available bool `json:"available,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SizeQuery when eager-loading is set.
	Edges        SizeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SizeEdges holds the relations/edges for other nodes in the graph.
type SizeEdges struct {
	// ProductInfo holds the value of the product_info edge.
	ProductInfo *ProductInfo `json:"product_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductInfoOrErr returns the ProductInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SizeEdges) ProductInfoOrErr() (*ProductInfo, error) {
	if e.loadedTypes[0] {
		if e.ProductInfo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: productinfo.Label}
		}
		return e.ProductInfo, nil
	}
	return nil, &NotLoadedError{edge: "product_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Size) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case size.FieldAvailable:
			values[i] = new(sql.NullBool)
		case size.FieldID, size.FieldSku:
			values[i] = new(sql.NullInt64)
		case size.FieldSize:
			values[i] = new(sql.NullString)
		case size.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Size fields.
func (s *Size) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case size.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int32(value.Int64)
		case size.FieldSku:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				s.Sku = int32(value.Int64)
			}
		case size.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				s.Size = value.String
			}
		case size.FieldAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field available", values[i])
			} else if value.Valid {
				s.Available = value.Bool
			}
		case size.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Size.
// This includes values selected through modifiers, order, etc.
func (s *Size) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryProductInfo queries the "product_info" edge of the Size entity.
func (s *Size) QueryProductInfo() *ProductInfoQuery {
	return NewSizeClient(s.config).QueryProductInfo(s)
}

// Update returns a builder for updating this Size.
// Note that you need to call Size.Unwrap() before calling this method if this Size
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Size) Update() *SizeUpdateOne {
	return NewSizeClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Size entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Size) Unwrap() *Size {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Size is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Size) String() string {
	var builder strings.Builder
	builder.WriteString("Size(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("sku=")
	builder.WriteString(fmt.Sprintf("%v", s.Sku))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(s.Size)
	builder.WriteString(", ")
	builder.WriteString("available=")
	builder.WriteString(fmt.Sprintf("%v", s.Available))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sizes is a parsable slice of Size.
type Sizes []*Size
