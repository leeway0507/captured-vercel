// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderrow"
	"product-server/ent/productinfo"
	"product-server/ent/size"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductInfoCreate is the builder for creating a ProductInfo entity.
type ProductInfoCreate struct {
	config
	mutation *ProductInfoMutation
	hooks    []Hook
}

// SetBrand sets the "brand" field.
func (pic *ProductInfoCreate) SetBrand(s string) *ProductInfoCreate {
	pic.mutation.SetBrand(s)
	return pic
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableBrand(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetBrand(*s)
	}
	return pic
}

// SetProductName sets the "product_name" field.
func (pic *ProductInfoCreate) SetProductName(s string) *ProductInfoCreate {
	pic.mutation.SetProductName(s)
	return pic
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableProductName(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetProductName(*s)
	}
	return pic
}

// SetProductID sets the "product_id" field.
func (pic *ProductInfoCreate) SetProductID(s string) *ProductInfoCreate {
	pic.mutation.SetProductID(s)
	return pic
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableProductID(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetProductID(*s)
	}
	return pic
}

// SetShippingFee sets the "shipping_fee" field.
func (pic *ProductInfoCreate) SetShippingFee(i int32) *ProductInfoCreate {
	pic.mutation.SetShippingFee(i)
	return pic
}

// SetNillableShippingFee sets the "shipping_fee" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableShippingFee(i *int32) *ProductInfoCreate {
	if i != nil {
		pic.SetShippingFee(*i)
	}
	return pic
}

// SetPrice sets the "price" field.
func (pic *ProductInfoCreate) SetPrice(i int32) *ProductInfoCreate {
	pic.mutation.SetPrice(i)
	return pic
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillablePrice(i *int32) *ProductInfoCreate {
	if i != nil {
		pic.SetPrice(*i)
	}
	return pic
}

// SetIntl sets the "intl" field.
func (pic *ProductInfoCreate) SetIntl(b bool) *ProductInfoCreate {
	pic.mutation.SetIntl(b)
	return pic
}

// SetNillableIntl sets the "intl" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableIntl(b *bool) *ProductInfoCreate {
	if b != nil {
		pic.SetIntl(*b)
	}
	return pic
}

// SetSearchInfo sets the "search_info" field.
func (pic *ProductInfoCreate) SetSearchInfo(s string) *ProductInfoCreate {
	pic.mutation.SetSearchInfo(s)
	return pic
}

// SetNillableSearchInfo sets the "search_info" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableSearchInfo(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetSearchInfo(*s)
	}
	return pic
}

// SetColor sets the "color" field.
func (pic *ProductInfoCreate) SetColor(s string) *ProductInfoCreate {
	pic.mutation.SetColor(s)
	return pic
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableColor(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetColor(*s)
	}
	return pic
}

// SetCategory sets the "category" field.
func (pic *ProductInfoCreate) SetCategory(s string) *ProductInfoCreate {
	pic.mutation.SetCategory(s)
	return pic
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableCategory(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetCategory(*s)
	}
	return pic
}

// SetCategorySpec sets the "category_spec" field.
func (pic *ProductInfoCreate) SetCategorySpec(s string) *ProductInfoCreate {
	pic.mutation.SetCategorySpec(s)
	return pic
}

// SetNillableCategorySpec sets the "category_spec" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableCategorySpec(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetCategorySpec(*s)
	}
	return pic
}

// SetImgType sets the "img_type" field.
func (pic *ProductInfoCreate) SetImgType(s string) *ProductInfoCreate {
	pic.mutation.SetImgType(s)
	return pic
}

// SetNillableImgType sets the "img_type" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableImgType(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetImgType(*s)
	}
	return pic
}

// SetPriceDescCursor sets the "price_desc_cursor" field.
func (pic *ProductInfoCreate) SetPriceDescCursor(s string) *ProductInfoCreate {
	pic.mutation.SetPriceDescCursor(s)
	return pic
}

// SetNillablePriceDescCursor sets the "price_desc_cursor" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillablePriceDescCursor(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetPriceDescCursor(*s)
	}
	return pic
}

// SetPriceAscCursor sets the "price_asc_cursor" field.
func (pic *ProductInfoCreate) SetPriceAscCursor(s string) *ProductInfoCreate {
	pic.mutation.SetPriceAscCursor(s)
	return pic
}

// SetNillablePriceAscCursor sets the "price_asc_cursor" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillablePriceAscCursor(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetPriceAscCursor(*s)
	}
	return pic
}

// SetDeploy sets the "deploy" field.
func (pic *ProductInfoCreate) SetDeploy(i int32) *ProductInfoCreate {
	pic.mutation.SetDeploy(i)
	return pic
}

// SetNillableDeploy sets the "deploy" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableDeploy(i *int32) *ProductInfoCreate {
	if i != nil {
		pic.SetDeploy(*i)
	}
	return pic
}

// SetKorProductName sets the "kor_product_name" field.
func (pic *ProductInfoCreate) SetKorProductName(s string) *ProductInfoCreate {
	pic.mutation.SetKorProductName(s)
	return pic
}

// SetNillableKorProductName sets the "kor_product_name" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableKorProductName(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetKorProductName(*s)
	}
	return pic
}

// SetKorBrand sets the "kor_brand" field.
func (pic *ProductInfoCreate) SetKorBrand(s string) *ProductInfoCreate {
	pic.mutation.SetKorBrand(s)
	return pic
}

// SetNillableKorBrand sets the "kor_brand" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableKorBrand(s *string) *ProductInfoCreate {
	if s != nil {
		pic.SetKorBrand(*s)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *ProductInfoCreate) SetID(i int32) *ProductInfoCreate {
	pic.mutation.SetID(i)
	return pic
}

// AddOrderRowIDs adds the "order_rows" edge to the OrderRow entity by IDs.
func (pic *ProductInfoCreate) AddOrderRowIDs(ids ...int32) *ProductInfoCreate {
	pic.mutation.AddOrderRowIDs(ids...)
	return pic
}

// AddOrderRows adds the "order_rows" edges to the OrderRow entity.
func (pic *ProductInfoCreate) AddOrderRows(o ...*OrderRow) *ProductInfoCreate {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pic.AddOrderRowIDs(ids...)
}

// AddSizeIDs adds the "sizes" edge to the Size entity by IDs.
func (pic *ProductInfoCreate) AddSizeIDs(ids ...int32) *ProductInfoCreate {
	pic.mutation.AddSizeIDs(ids...)
	return pic
}

// AddSizes adds the "sizes" edges to the Size entity.
func (pic *ProductInfoCreate) AddSizes(s ...*Size) *ProductInfoCreate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pic.AddSizeIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (pic *ProductInfoCreate) Mutation() *ProductInfoMutation {
	return pic.mutation
}

// Save creates the ProductInfo in the database.
func (pic *ProductInfoCreate) Save(ctx context.Context) (*ProductInfo, error) {
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProductInfoCreate) SaveX(ctx context.Context) *ProductInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProductInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProductInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProductInfoCreate) check() error {
	return nil
}

func (pic *ProductInfoCreate) sqlSave(ctx context.Context) (*ProductInfo, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProductInfoCreate) createSpec() (*ProductInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductInfo{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(productinfo.Table, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.Brand(); ok {
		_spec.SetField(productinfo.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := pic.mutation.ProductName(); ok {
		_spec.SetField(productinfo.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := pic.mutation.ProductID(); ok {
		_spec.SetField(productinfo.FieldProductID, field.TypeString, value)
		_node.ProductID = value
	}
	if value, ok := pic.mutation.ShippingFee(); ok {
		_spec.SetField(productinfo.FieldShippingFee, field.TypeInt32, value)
		_node.ShippingFee = value
	}
	if value, ok := pic.mutation.Price(); ok {
		_spec.SetField(productinfo.FieldPrice, field.TypeInt32, value)
		_node.Price = value
	}
	if value, ok := pic.mutation.Intl(); ok {
		_spec.SetField(productinfo.FieldIntl, field.TypeBool, value)
		_node.Intl = value
	}
	if value, ok := pic.mutation.SearchInfo(); ok {
		_spec.SetField(productinfo.FieldSearchInfo, field.TypeString, value)
		_node.SearchInfo = value
	}
	if value, ok := pic.mutation.Color(); ok {
		_spec.SetField(productinfo.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := pic.mutation.Category(); ok {
		_spec.SetField(productinfo.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pic.mutation.CategorySpec(); ok {
		_spec.SetField(productinfo.FieldCategorySpec, field.TypeString, value)
		_node.CategorySpec = value
	}
	if value, ok := pic.mutation.ImgType(); ok {
		_spec.SetField(productinfo.FieldImgType, field.TypeString, value)
		_node.ImgType = value
	}
	if value, ok := pic.mutation.PriceDescCursor(); ok {
		_spec.SetField(productinfo.FieldPriceDescCursor, field.TypeString, value)
		_node.PriceDescCursor = value
	}
	if value, ok := pic.mutation.PriceAscCursor(); ok {
		_spec.SetField(productinfo.FieldPriceAscCursor, field.TypeString, value)
		_node.PriceAscCursor = value
	}
	if value, ok := pic.mutation.Deploy(); ok {
		_spec.SetField(productinfo.FieldDeploy, field.TypeInt32, value)
		_node.Deploy = value
	}
	if value, ok := pic.mutation.KorProductName(); ok {
		_spec.SetField(productinfo.FieldKorProductName, field.TypeString, value)
		_node.KorProductName = value
	}
	if value, ok := pic.mutation.KorBrand(); ok {
		_spec.SetField(productinfo.FieldKorBrand, field.TypeString, value)
		_node.KorBrand = value
	}
	if nodes := pic.mutation.OrderRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.SizesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductInfoCreateBulk is the builder for creating many ProductInfo entities in bulk.
type ProductInfoCreateBulk struct {
	config
	err      error
	builders []*ProductInfoCreate
}

// Save creates the ProductInfo entities in the database.
func (picb *ProductInfoCreateBulk) Save(ctx context.Context) ([]*ProductInfo, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProductInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProductInfoCreateBulk) SaveX(ctx context.Context) []*ProductInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProductInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProductInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
