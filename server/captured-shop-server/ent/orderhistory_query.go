// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/predicate"
	"product-server/ent/user"
	"product-server/ent/useraddress"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderHistoryQuery is the builder for querying OrderHistory entities.
type OrderHistoryQuery struct {
	config
	ctx           *QueryContext
	order         []orderhistory.OrderOption
	inters        []Interceptor
	predicates    []predicate.OrderHistory
	withUser      *UserQuery
	withUserAddre *UserAddressQuery
	withOrderRows *OrderRowQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderHistoryQuery builder.
func (ohq *OrderHistoryQuery) Where(ps ...predicate.OrderHistory) *OrderHistoryQuery {
	ohq.predicates = append(ohq.predicates, ps...)
	return ohq
}

// Limit the number of records to be returned by this query.
func (ohq *OrderHistoryQuery) Limit(limit int) *OrderHistoryQuery {
	ohq.ctx.Limit = &limit
	return ohq
}

// Offset to start from.
func (ohq *OrderHistoryQuery) Offset(offset int) *OrderHistoryQuery {
	ohq.ctx.Offset = &offset
	return ohq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ohq *OrderHistoryQuery) Unique(unique bool) *OrderHistoryQuery {
	ohq.ctx.Unique = &unique
	return ohq
}

// Order specifies how the records should be ordered.
func (ohq *OrderHistoryQuery) Order(o ...orderhistory.OrderOption) *OrderHistoryQuery {
	ohq.order = append(ohq.order, o...)
	return ohq
}

// QueryUser chains the current query on the "user" edge.
func (ohq *OrderHistoryQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ohq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderhistory.UserTable, orderhistory.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserAddre chains the current query on the "user_addre" edge.
func (ohq *OrderHistoryQuery) QueryUserAddre() *UserAddressQuery {
	query := (&UserAddressClient{config: ohq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, selector),
			sqlgraph.To(useraddress.Table, useraddress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderhistory.UserAddreTable, orderhistory.UserAddreColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderRows chains the current query on the "order_rows" edge.
func (ohq *OrderHistoryQuery) QueryOrderRows() *OrderRowQuery {
	query := (&OrderRowClient{config: ohq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, selector),
			sqlgraph.To(orderrow.Table, orderrow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderhistory.OrderRowsTable, orderhistory.OrderRowsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderHistory entity from the query.
// Returns a *NotFoundError when no OrderHistory was found.
func (ohq *OrderHistoryQuery) First(ctx context.Context) (*OrderHistory, error) {
	nodes, err := ohq.Limit(1).All(setContextOp(ctx, ohq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ohq *OrderHistoryQuery) FirstX(ctx context.Context) *OrderHistory {
	node, err := ohq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderHistory ID from the query.
// Returns a *NotFoundError when no OrderHistory ID was found.
func (ohq *OrderHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ohq.Limit(1).IDs(setContextOp(ctx, ohq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ohq *OrderHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := ohq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderHistory entity is found.
// Returns a *NotFoundError when no OrderHistory entities are found.
func (ohq *OrderHistoryQuery) Only(ctx context.Context) (*OrderHistory, error) {
	nodes, err := ohq.Limit(2).All(setContextOp(ctx, ohq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderhistory.Label}
	default:
		return nil, &NotSingularError{orderhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ohq *OrderHistoryQuery) OnlyX(ctx context.Context) *OrderHistory {
	node, err := ohq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderHistory ID in the query.
// Returns a *NotSingularError when more than one OrderHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (ohq *OrderHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ohq.Limit(2).IDs(setContextOp(ctx, ohq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderhistory.Label}
	default:
		err = &NotSingularError{orderhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ohq *OrderHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := ohq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderHistories.
func (ohq *OrderHistoryQuery) All(ctx context.Context) ([]*OrderHistory, error) {
	ctx = setContextOp(ctx, ohq.ctx, "All")
	if err := ohq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrderHistory, *OrderHistoryQuery]()
	return withInterceptors[[]*OrderHistory](ctx, ohq, qr, ohq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ohq *OrderHistoryQuery) AllX(ctx context.Context) []*OrderHistory {
	nodes, err := ohq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderHistory IDs.
func (ohq *OrderHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ohq.ctx.Unique == nil && ohq.path != nil {
		ohq.Unique(true)
	}
	ctx = setContextOp(ctx, ohq.ctx, "IDs")
	if err = ohq.Select(orderhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ohq *OrderHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := ohq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ohq *OrderHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ohq.ctx, "Count")
	if err := ohq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ohq, querierCount[*OrderHistoryQuery](), ohq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ohq *OrderHistoryQuery) CountX(ctx context.Context) int {
	count, err := ohq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ohq *OrderHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ohq.ctx, "Exist")
	switch _, err := ohq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ohq *OrderHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := ohq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ohq *OrderHistoryQuery) Clone() *OrderHistoryQuery {
	if ohq == nil {
		return nil
	}
	return &OrderHistoryQuery{
		config:        ohq.config,
		ctx:           ohq.ctx.Clone(),
		order:         append([]orderhistory.OrderOption{}, ohq.order...),
		inters:        append([]Interceptor{}, ohq.inters...),
		predicates:    append([]predicate.OrderHistory{}, ohq.predicates...),
		withUser:      ohq.withUser.Clone(),
		withUserAddre: ohq.withUserAddre.Clone(),
		withOrderRows: ohq.withOrderRows.Clone(),
		// clone intermediate query.
		sql:  ohq.sql.Clone(),
		path: ohq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHistoryQuery) WithUser(opts ...func(*UserQuery)) *OrderHistoryQuery {
	query := (&UserClient{config: ohq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ohq.withUser = query
	return ohq
}

// WithUserAddre tells the query-builder to eager-load the nodes that are connected to
// the "user_addre" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHistoryQuery) WithUserAddre(opts ...func(*UserAddressQuery)) *OrderHistoryQuery {
	query := (&UserAddressClient{config: ohq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ohq.withUserAddre = query
	return ohq
}

// WithOrderRows tells the query-builder to eager-load the nodes that are connected to
// the "order_rows" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHistoryQuery) WithOrderRows(opts ...func(*OrderRowQuery)) *OrderHistoryQuery {
	query := (&OrderRowClient{config: ohq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderRows = query
	return ohq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderHistory.Query().
//		GroupBy(orderhistory.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ohq *OrderHistoryQuery) GroupBy(field string, fields ...string) *OrderHistoryGroupBy {
	ohq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrderHistoryGroupBy{build: ohq}
	grbuild.flds = &ohq.ctx.Fields
	grbuild.label = orderhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//	}
//
//	client.OrderHistory.Query().
//		Select(orderhistory.FieldUserID).
//		Scan(ctx, &v)
func (ohq *OrderHistoryQuery) Select(fields ...string) *OrderHistorySelect {
	ohq.ctx.Fields = append(ohq.ctx.Fields, fields...)
	sbuild := &OrderHistorySelect{OrderHistoryQuery: ohq}
	sbuild.label = orderhistory.Label
	sbuild.flds, sbuild.scan = &ohq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrderHistorySelect configured with the given aggregations.
func (ohq *OrderHistoryQuery) Aggregate(fns ...AggregateFunc) *OrderHistorySelect {
	return ohq.Select().Aggregate(fns...)
}

func (ohq *OrderHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ohq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ohq); err != nil {
				return err
			}
		}
	}
	for _, f := range ohq.ctx.Fields {
		if !orderhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ohq.path != nil {
		prev, err := ohq.path(ctx)
		if err != nil {
			return err
		}
		ohq.sql = prev
	}
	return nil
}

func (ohq *OrderHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderHistory, error) {
	var (
		nodes       = []*OrderHistory{}
		_spec       = ohq.querySpec()
		loadedTypes = [3]bool{
			ohq.withUser != nil,
			ohq.withUserAddre != nil,
			ohq.withOrderRows != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrderHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrderHistory{config: ohq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ohq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ohq.withUser; query != nil {
		if err := ohq.loadUser(ctx, query, nodes, nil,
			func(n *OrderHistory, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ohq.withUserAddre; query != nil {
		if err := ohq.loadUserAddre(ctx, query, nodes, nil,
			func(n *OrderHistory, e *UserAddress) { n.Edges.UserAddre = e }); err != nil {
			return nil, err
		}
	}
	if query := ohq.withOrderRows; query != nil {
		if err := ohq.loadOrderRows(ctx, query, nodes,
			func(n *OrderHistory) { n.Edges.OrderRows = []*OrderRow{} },
			func(n *OrderHistory, e *OrderRow) { n.Edges.OrderRows = append(n.Edges.OrderRows, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ohq *OrderHistoryQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*OrderHistory, init func(*OrderHistory), assign func(*OrderHistory, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*OrderHistory)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ohq *OrderHistoryQuery) loadUserAddre(ctx context.Context, query *UserAddressQuery, nodes []*OrderHistory, init func(*OrderHistory), assign func(*OrderHistory, *UserAddress)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*OrderHistory)
	for i := range nodes {
		fk := nodes[i].AddressID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(useraddress.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "address_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ohq *OrderHistoryQuery) loadOrderRows(ctx context.Context, query *OrderRowQuery, nodes []*OrderHistory, init func(*OrderHistory), assign func(*OrderHistory, *OrderRow)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*OrderHistory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orderrow.FieldOrderID)
	}
	query.Where(predicate.OrderRow(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orderhistory.OrderRowsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ohq *OrderHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ohq.querySpec()
	_spec.Node.Columns = ohq.ctx.Fields
	if len(ohq.ctx.Fields) > 0 {
		_spec.Unique = ohq.ctx.Unique != nil && *ohq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ohq.driver, _spec)
}

func (ohq *OrderHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	_spec.From = ohq.sql
	if unique := ohq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ohq.path != nil {
		_spec.Unique = true
	}
	if fields := ohq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderhistory.FieldID)
		for i := range fields {
			if fields[i] != orderhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ohq.withUser != nil {
			_spec.Node.AddColumnOnce(orderhistory.FieldUserID)
		}
		if ohq.withUserAddre != nil {
			_spec.Node.AddColumnOnce(orderhistory.FieldAddressID)
		}
	}
	if ps := ohq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ohq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ohq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ohq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ohq *OrderHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ohq.driver.Dialect())
	t1 := builder.Table(orderhistory.Table)
	columns := ohq.ctx.Fields
	if len(columns) == 0 {
		columns = orderhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ohq.sql != nil {
		selector = ohq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ohq.ctx.Unique != nil && *ohq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ohq.predicates {
		p(selector)
	}
	for _, p := range ohq.order {
		p(selector)
	}
	if offset := ohq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ohq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderHistoryGroupBy is the group-by builder for OrderHistory entities.
type OrderHistoryGroupBy struct {
	selector
	build *OrderHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ohgb *OrderHistoryGroupBy) Aggregate(fns ...AggregateFunc) *OrderHistoryGroupBy {
	ohgb.fns = append(ohgb.fns, fns...)
	return ohgb
}

// Scan applies the selector query and scans the result into the given value.
func (ohgb *OrderHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ohgb.build.ctx, "GroupBy")
	if err := ohgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderHistoryQuery, *OrderHistoryGroupBy](ctx, ohgb.build, ohgb, ohgb.build.inters, v)
}

func (ohgb *OrderHistoryGroupBy) sqlScan(ctx context.Context, root *OrderHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ohgb.fns))
	for _, fn := range ohgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ohgb.flds)+len(ohgb.fns))
		for _, f := range *ohgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ohgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ohgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrderHistorySelect is the builder for selecting fields of OrderHistory entities.
type OrderHistorySelect struct {
	*OrderHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ohs *OrderHistorySelect) Aggregate(fns ...AggregateFunc) *OrderHistorySelect {
	ohs.fns = append(ohs.fns, fns...)
	return ohs
}

// Scan applies the selector query and scans the result into the given value.
func (ohs *OrderHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ohs.ctx, "Select")
	if err := ohs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderHistoryQuery, *OrderHistorySelect](ctx, ohs.OrderHistoryQuery, ohs, ohs.inters, v)
}

func (ohs *OrderHistorySelect) sqlScan(ctx context.Context, root *OrderHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ohs.fns))
	for _, fn := range ohs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ohs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ohs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
