// Code generated by ent, DO NOT EDIT.

package useraddress

import (
	"product-server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldUserID, v))
}

// KrName applies equality check predicate on the "kr_name" field. It's identical to KrNameEQ.
func KrName(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldKrName, v))
}

// EnName applies equality check predicate on the "en_name" field. It's identical to EnNameEQ.
func EnName(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldEnName, v))
}

// CustomID applies equality check predicate on the "custom_id" field. It's identical to CustomIDEQ.
func CustomID(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldCustomID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldPhone, v))
}

// KrAddress applies equality check predicate on the "kr_address" field. It's identical to KrAddressEQ.
func KrAddress(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldKrAddress, v))
}

// KrAddressDetail applies equality check predicate on the "kr_address_detail" field. It's identical to KrAddressDetailEQ.
func KrAddressDetail(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldKrAddressDetail, v))
}

// EnAddress applies equality check predicate on the "en_address" field. It's identical to EnAddressEQ.
func EnAddress(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldEnAddress, v))
}

// EnAddressDetail applies equality check predicate on the "en_address_detail" field. It's identical to EnAddressDetailEQ.
func EnAddressDetail(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldEnAddressDetail, v))
}

// Permanent applies equality check predicate on the "permanent" field. It's identical to PermanentEQ.
func Permanent(v bool) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldPermanent, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldUserID, v))
}

// KrNameEQ applies the EQ predicate on the "kr_name" field.
func KrNameEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldKrName, v))
}

// KrNameNEQ applies the NEQ predicate on the "kr_name" field.
func KrNameNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldKrName, v))
}

// KrNameIn applies the In predicate on the "kr_name" field.
func KrNameIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldKrName, vs...))
}

// KrNameNotIn applies the NotIn predicate on the "kr_name" field.
func KrNameNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldKrName, vs...))
}

// KrNameGT applies the GT predicate on the "kr_name" field.
func KrNameGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldKrName, v))
}

// KrNameGTE applies the GTE predicate on the "kr_name" field.
func KrNameGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldKrName, v))
}

// KrNameLT applies the LT predicate on the "kr_name" field.
func KrNameLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldKrName, v))
}

// KrNameLTE applies the LTE predicate on the "kr_name" field.
func KrNameLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldKrName, v))
}

// KrNameContains applies the Contains predicate on the "kr_name" field.
func KrNameContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldKrName, v))
}

// KrNameHasPrefix applies the HasPrefix predicate on the "kr_name" field.
func KrNameHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldKrName, v))
}

// KrNameHasSuffix applies the HasSuffix predicate on the "kr_name" field.
func KrNameHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldKrName, v))
}

// KrNameEqualFold applies the EqualFold predicate on the "kr_name" field.
func KrNameEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldKrName, v))
}

// KrNameContainsFold applies the ContainsFold predicate on the "kr_name" field.
func KrNameContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldKrName, v))
}

// EnNameEQ applies the EQ predicate on the "en_name" field.
func EnNameEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldEnName, v))
}

// EnNameNEQ applies the NEQ predicate on the "en_name" field.
func EnNameNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldEnName, v))
}

// EnNameIn applies the In predicate on the "en_name" field.
func EnNameIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldEnName, vs...))
}

// EnNameNotIn applies the NotIn predicate on the "en_name" field.
func EnNameNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldEnName, vs...))
}

// EnNameGT applies the GT predicate on the "en_name" field.
func EnNameGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldEnName, v))
}

// EnNameGTE applies the GTE predicate on the "en_name" field.
func EnNameGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldEnName, v))
}

// EnNameLT applies the LT predicate on the "en_name" field.
func EnNameLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldEnName, v))
}

// EnNameLTE applies the LTE predicate on the "en_name" field.
func EnNameLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldEnName, v))
}

// EnNameContains applies the Contains predicate on the "en_name" field.
func EnNameContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldEnName, v))
}

// EnNameHasPrefix applies the HasPrefix predicate on the "en_name" field.
func EnNameHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldEnName, v))
}

// EnNameHasSuffix applies the HasSuffix predicate on the "en_name" field.
func EnNameHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldEnName, v))
}

// EnNameEqualFold applies the EqualFold predicate on the "en_name" field.
func EnNameEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldEnName, v))
}

// EnNameContainsFold applies the ContainsFold predicate on the "en_name" field.
func EnNameContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldEnName, v))
}

// CustomIDEQ applies the EQ predicate on the "custom_id" field.
func CustomIDEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldCustomID, v))
}

// CustomIDNEQ applies the NEQ predicate on the "custom_id" field.
func CustomIDNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldCustomID, v))
}

// CustomIDIn applies the In predicate on the "custom_id" field.
func CustomIDIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldCustomID, vs...))
}

// CustomIDNotIn applies the NotIn predicate on the "custom_id" field.
func CustomIDNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldCustomID, vs...))
}

// CustomIDGT applies the GT predicate on the "custom_id" field.
func CustomIDGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldCustomID, v))
}

// CustomIDGTE applies the GTE predicate on the "custom_id" field.
func CustomIDGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldCustomID, v))
}

// CustomIDLT applies the LT predicate on the "custom_id" field.
func CustomIDLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldCustomID, v))
}

// CustomIDLTE applies the LTE predicate on the "custom_id" field.
func CustomIDLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldCustomID, v))
}

// CustomIDContains applies the Contains predicate on the "custom_id" field.
func CustomIDContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldCustomID, v))
}

// CustomIDHasPrefix applies the HasPrefix predicate on the "custom_id" field.
func CustomIDHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldCustomID, v))
}

// CustomIDHasSuffix applies the HasSuffix predicate on the "custom_id" field.
func CustomIDHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldCustomID, v))
}

// CustomIDEqualFold applies the EqualFold predicate on the "custom_id" field.
func CustomIDEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldCustomID, v))
}

// CustomIDContainsFold applies the ContainsFold predicate on the "custom_id" field.
func CustomIDContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldCustomID, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldPhone, v))
}

// KrAddressEQ applies the EQ predicate on the "kr_address" field.
func KrAddressEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldKrAddress, v))
}

// KrAddressNEQ applies the NEQ predicate on the "kr_address" field.
func KrAddressNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldKrAddress, v))
}

// KrAddressIn applies the In predicate on the "kr_address" field.
func KrAddressIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldKrAddress, vs...))
}

// KrAddressNotIn applies the NotIn predicate on the "kr_address" field.
func KrAddressNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldKrAddress, vs...))
}

// KrAddressGT applies the GT predicate on the "kr_address" field.
func KrAddressGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldKrAddress, v))
}

// KrAddressGTE applies the GTE predicate on the "kr_address" field.
func KrAddressGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldKrAddress, v))
}

// KrAddressLT applies the LT predicate on the "kr_address" field.
func KrAddressLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldKrAddress, v))
}

// KrAddressLTE applies the LTE predicate on the "kr_address" field.
func KrAddressLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldKrAddress, v))
}

// KrAddressContains applies the Contains predicate on the "kr_address" field.
func KrAddressContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldKrAddress, v))
}

// KrAddressHasPrefix applies the HasPrefix predicate on the "kr_address" field.
func KrAddressHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldKrAddress, v))
}

// KrAddressHasSuffix applies the HasSuffix predicate on the "kr_address" field.
func KrAddressHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldKrAddress, v))
}

// KrAddressEqualFold applies the EqualFold predicate on the "kr_address" field.
func KrAddressEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldKrAddress, v))
}

// KrAddressContainsFold applies the ContainsFold predicate on the "kr_address" field.
func KrAddressContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldKrAddress, v))
}

// KrAddressDetailEQ applies the EQ predicate on the "kr_address_detail" field.
func KrAddressDetailEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldKrAddressDetail, v))
}

// KrAddressDetailNEQ applies the NEQ predicate on the "kr_address_detail" field.
func KrAddressDetailNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldKrAddressDetail, v))
}

// KrAddressDetailIn applies the In predicate on the "kr_address_detail" field.
func KrAddressDetailIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldKrAddressDetail, vs...))
}

// KrAddressDetailNotIn applies the NotIn predicate on the "kr_address_detail" field.
func KrAddressDetailNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldKrAddressDetail, vs...))
}

// KrAddressDetailGT applies the GT predicate on the "kr_address_detail" field.
func KrAddressDetailGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldKrAddressDetail, v))
}

// KrAddressDetailGTE applies the GTE predicate on the "kr_address_detail" field.
func KrAddressDetailGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldKrAddressDetail, v))
}

// KrAddressDetailLT applies the LT predicate on the "kr_address_detail" field.
func KrAddressDetailLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldKrAddressDetail, v))
}

// KrAddressDetailLTE applies the LTE predicate on the "kr_address_detail" field.
func KrAddressDetailLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldKrAddressDetail, v))
}

// KrAddressDetailContains applies the Contains predicate on the "kr_address_detail" field.
func KrAddressDetailContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldKrAddressDetail, v))
}

// KrAddressDetailHasPrefix applies the HasPrefix predicate on the "kr_address_detail" field.
func KrAddressDetailHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldKrAddressDetail, v))
}

// KrAddressDetailHasSuffix applies the HasSuffix predicate on the "kr_address_detail" field.
func KrAddressDetailHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldKrAddressDetail, v))
}

// KrAddressDetailEqualFold applies the EqualFold predicate on the "kr_address_detail" field.
func KrAddressDetailEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldKrAddressDetail, v))
}

// KrAddressDetailContainsFold applies the ContainsFold predicate on the "kr_address_detail" field.
func KrAddressDetailContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldKrAddressDetail, v))
}

// EnAddressEQ applies the EQ predicate on the "en_address" field.
func EnAddressEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldEnAddress, v))
}

// EnAddressNEQ applies the NEQ predicate on the "en_address" field.
func EnAddressNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldEnAddress, v))
}

// EnAddressIn applies the In predicate on the "en_address" field.
func EnAddressIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldEnAddress, vs...))
}

// EnAddressNotIn applies the NotIn predicate on the "en_address" field.
func EnAddressNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldEnAddress, vs...))
}

// EnAddressGT applies the GT predicate on the "en_address" field.
func EnAddressGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldEnAddress, v))
}

// EnAddressGTE applies the GTE predicate on the "en_address" field.
func EnAddressGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldEnAddress, v))
}

// EnAddressLT applies the LT predicate on the "en_address" field.
func EnAddressLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldEnAddress, v))
}

// EnAddressLTE applies the LTE predicate on the "en_address" field.
func EnAddressLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldEnAddress, v))
}

// EnAddressContains applies the Contains predicate on the "en_address" field.
func EnAddressContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldEnAddress, v))
}

// EnAddressHasPrefix applies the HasPrefix predicate on the "en_address" field.
func EnAddressHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldEnAddress, v))
}

// EnAddressHasSuffix applies the HasSuffix predicate on the "en_address" field.
func EnAddressHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldEnAddress, v))
}

// EnAddressEqualFold applies the EqualFold predicate on the "en_address" field.
func EnAddressEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldEnAddress, v))
}

// EnAddressContainsFold applies the ContainsFold predicate on the "en_address" field.
func EnAddressContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldEnAddress, v))
}

// EnAddressDetailEQ applies the EQ predicate on the "en_address_detail" field.
func EnAddressDetailEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldEnAddressDetail, v))
}

// EnAddressDetailNEQ applies the NEQ predicate on the "en_address_detail" field.
func EnAddressDetailNEQ(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldEnAddressDetail, v))
}

// EnAddressDetailIn applies the In predicate on the "en_address_detail" field.
func EnAddressDetailIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldIn(FieldEnAddressDetail, vs...))
}

// EnAddressDetailNotIn applies the NotIn predicate on the "en_address_detail" field.
func EnAddressDetailNotIn(vs ...string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNotIn(FieldEnAddressDetail, vs...))
}

// EnAddressDetailGT applies the GT predicate on the "en_address_detail" field.
func EnAddressDetailGT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGT(FieldEnAddressDetail, v))
}

// EnAddressDetailGTE applies the GTE predicate on the "en_address_detail" field.
func EnAddressDetailGTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldGTE(FieldEnAddressDetail, v))
}

// EnAddressDetailLT applies the LT predicate on the "en_address_detail" field.
func EnAddressDetailLT(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLT(FieldEnAddressDetail, v))
}

// EnAddressDetailLTE applies the LTE predicate on the "en_address_detail" field.
func EnAddressDetailLTE(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldLTE(FieldEnAddressDetail, v))
}

// EnAddressDetailContains applies the Contains predicate on the "en_address_detail" field.
func EnAddressDetailContains(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContains(FieldEnAddressDetail, v))
}

// EnAddressDetailHasPrefix applies the HasPrefix predicate on the "en_address_detail" field.
func EnAddressDetailHasPrefix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasPrefix(FieldEnAddressDetail, v))
}

// EnAddressDetailHasSuffix applies the HasSuffix predicate on the "en_address_detail" field.
func EnAddressDetailHasSuffix(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldHasSuffix(FieldEnAddressDetail, v))
}

// EnAddressDetailEqualFold applies the EqualFold predicate on the "en_address_detail" field.
func EnAddressDetailEqualFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEqualFold(FieldEnAddressDetail, v))
}

// EnAddressDetailContainsFold applies the ContainsFold predicate on the "en_address_detail" field.
func EnAddressDetailContainsFold(v string) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldContainsFold(FieldEnAddressDetail, v))
}

// PermanentEQ applies the EQ predicate on the "permanent" field.
func PermanentEQ(v bool) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldEQ(FieldPermanent, v))
}

// PermanentNEQ applies the NEQ predicate on the "permanent" field.
func PermanentNEQ(v bool) predicate.UserAddress {
	return predicate.UserAddress(sql.FieldNEQ(FieldPermanent, v))
}

// HasOrderHistories applies the HasEdge predicate on the "order_histories" edge.
func HasOrderHistories() predicate.UserAddress {
	return predicate.UserAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoriesTable, OrderHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHistoriesWith applies the HasEdge predicate on the "order_histories" edge with a given conditions (other predicates).
func HasOrderHistoriesWith(preds ...predicate.OrderHistory) predicate.UserAddress {
	return predicate.UserAddress(func(s *sql.Selector) {
		step := newOrderHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAddress {
	return predicate.UserAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAddress {
	return predicate.UserAddress(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAddress) predicate.UserAddress {
	return predicate.UserAddress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAddress) predicate.UserAddress {
	return predicate.UserAddress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAddress) predicate.UserAddress {
	return predicate.UserAddress(sql.NotPredicates(p))
}
