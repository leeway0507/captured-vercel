// Code generated by ent, DO NOT EDIT.

package useraddress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the useraddress type in the database.
	Label = "user_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "address_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldKrName holds the string denoting the kr_name field in the database.
	FieldKrName = "kr_name"
	// FieldEnName holds the string denoting the en_name field in the database.
	FieldEnName = "en_name"
	// FieldCustomID holds the string denoting the custom_id field in the database.
	FieldCustomID = "custom_id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldKrAddress holds the string denoting the kr_address field in the database.
	FieldKrAddress = "kr_address"
	// FieldKrAddressDetail holds the string denoting the kr_address_detail field in the database.
	FieldKrAddressDetail = "kr_address_detail"
	// FieldEnAddress holds the string denoting the en_address field in the database.
	FieldEnAddress = "en_address"
	// FieldEnAddressDetail holds the string denoting the en_address_detail field in the database.
	FieldEnAddressDetail = "en_address_detail"
	// FieldPermanent holds the string denoting the permanent field in the database.
	FieldPermanent = "permanent"
	// EdgeOrderHistories holds the string denoting the order_histories edge name in mutations.
	EdgeOrderHistories = "order_histories"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// OrderHistoryFieldID holds the string denoting the ID field of the OrderHistory.
	OrderHistoryFieldID = "order_id"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "user_id"
	// Table holds the table name of the useraddress in the database.
	Table = "user_address"
	// OrderHistoriesTable is the table that holds the order_histories relation/edge.
	OrderHistoriesTable = "order_history"
	// OrderHistoriesInverseTable is the table name for the OrderHistory entity.
	// It exists in this package in order to avoid circular dependency with the "orderhistory" package.
	OrderHistoriesInverseTable = "order_history"
	// OrderHistoriesColumn is the table column denoting the order_histories relation/edge.
	OrderHistoriesColumn = "address_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_address"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for useraddress fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldKrName,
	FieldEnName,
	FieldCustomID,
	FieldPhone,
	FieldKrAddress,
	FieldKrAddressDetail,
	FieldEnAddress,
	FieldEnAddressDetail,
	FieldPermanent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByKrName orders the results by the kr_name field.
func ByKrName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKrName, opts...).ToFunc()
}

// ByEnName orders the results by the en_name field.
func ByEnName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnName, opts...).ToFunc()
}

// ByCustomID orders the results by the custom_id field.
func ByCustomID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomID, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByKrAddress orders the results by the kr_address field.
func ByKrAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKrAddress, opts...).ToFunc()
}

// ByKrAddressDetail orders the results by the kr_address_detail field.
func ByKrAddressDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKrAddressDetail, opts...).ToFunc()
}

// ByEnAddress orders the results by the en_address field.
func ByEnAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnAddress, opts...).ToFunc()
}

// ByEnAddressDetail orders the results by the en_address_detail field.
func ByEnAddressDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnAddressDetail, opts...).ToFunc()
}

// ByPermanent orders the results by the permanent field.
func ByPermanent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermanent, opts...).ToFunc()
}

// ByOrderHistoriesCount orders the results by order_histories count.
func ByOrderHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderHistoriesStep(), opts...)
	}
}

// ByOrderHistories orders the results by order_histories terms.
func ByOrderHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderHistoriesInverseTable, OrderHistoryFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoriesTable, OrderHistoriesColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
