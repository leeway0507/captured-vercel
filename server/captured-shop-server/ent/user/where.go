// Code generated by ent, DO NOT EDIT.

package user

import (
	"product-server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// KrName applies equality check predicate on the "kr_name" field. It's identical to KrNameEQ.
func KrName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldKrName, v))
}

// RegisterAt applies equality check predicate on the "register_at" field. It's identical to RegisterAtEQ.
func RegisterAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegisterAt, v))
}

// LastLogin applies equality check predicate on the "last_login" field. It's identical to LastLoginEQ.
func LastLogin(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogin, v))
}

// SignUpType applies equality check predicate on the "sign_up_type" field. It's identical to SignUpTypeEQ.
func SignUpType(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSignUpType, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// KrNameEQ applies the EQ predicate on the "kr_name" field.
func KrNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldKrName, v))
}

// KrNameNEQ applies the NEQ predicate on the "kr_name" field.
func KrNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldKrName, v))
}

// KrNameIn applies the In predicate on the "kr_name" field.
func KrNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldKrName, vs...))
}

// KrNameNotIn applies the NotIn predicate on the "kr_name" field.
func KrNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldKrName, vs...))
}

// KrNameGT applies the GT predicate on the "kr_name" field.
func KrNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldKrName, v))
}

// KrNameGTE applies the GTE predicate on the "kr_name" field.
func KrNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldKrName, v))
}

// KrNameLT applies the LT predicate on the "kr_name" field.
func KrNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldKrName, v))
}

// KrNameLTE applies the LTE predicate on the "kr_name" field.
func KrNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldKrName, v))
}

// KrNameContains applies the Contains predicate on the "kr_name" field.
func KrNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldKrName, v))
}

// KrNameHasPrefix applies the HasPrefix predicate on the "kr_name" field.
func KrNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldKrName, v))
}

// KrNameHasSuffix applies the HasSuffix predicate on the "kr_name" field.
func KrNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldKrName, v))
}

// KrNameEqualFold applies the EqualFold predicate on the "kr_name" field.
func KrNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldKrName, v))
}

// KrNameContainsFold applies the ContainsFold predicate on the "kr_name" field.
func KrNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldKrName, v))
}

// RegisterAtEQ applies the EQ predicate on the "register_at" field.
func RegisterAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegisterAt, v))
}

// RegisterAtNEQ applies the NEQ predicate on the "register_at" field.
func RegisterAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRegisterAt, v))
}

// RegisterAtIn applies the In predicate on the "register_at" field.
func RegisterAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldRegisterAt, vs...))
}

// RegisterAtNotIn applies the NotIn predicate on the "register_at" field.
func RegisterAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRegisterAt, vs...))
}

// RegisterAtGT applies the GT predicate on the "register_at" field.
func RegisterAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldRegisterAt, v))
}

// RegisterAtGTE applies the GTE predicate on the "register_at" field.
func RegisterAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRegisterAt, v))
}

// RegisterAtLT applies the LT predicate on the "register_at" field.
func RegisterAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldRegisterAt, v))
}

// RegisterAtLTE applies the LTE predicate on the "register_at" field.
func RegisterAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRegisterAt, v))
}

// LastLoginEQ applies the EQ predicate on the "last_login" field.
func LastLoginEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogin, v))
}

// LastLoginNEQ applies the NEQ predicate on the "last_login" field.
func LastLoginNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLogin, v))
}

// LastLoginIn applies the In predicate on the "last_login" field.
func LastLoginIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLogin, vs...))
}

// LastLoginNotIn applies the NotIn predicate on the "last_login" field.
func LastLoginNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLogin, vs...))
}

// LastLoginGT applies the GT predicate on the "last_login" field.
func LastLoginGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLogin, v))
}

// LastLoginGTE applies the GTE predicate on the "last_login" field.
func LastLoginGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLogin, v))
}

// LastLoginLT applies the LT predicate on the "last_login" field.
func LastLoginLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLogin, v))
}

// LastLoginLTE applies the LTE predicate on the "last_login" field.
func LastLoginLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLogin, v))
}

// SignUpTypeEQ applies the EQ predicate on the "sign_up_type" field.
func SignUpTypeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSignUpType, v))
}

// SignUpTypeNEQ applies the NEQ predicate on the "sign_up_type" field.
func SignUpTypeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSignUpType, v))
}

// SignUpTypeIn applies the In predicate on the "sign_up_type" field.
func SignUpTypeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSignUpType, vs...))
}

// SignUpTypeNotIn applies the NotIn predicate on the "sign_up_type" field.
func SignUpTypeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSignUpType, vs...))
}

// SignUpTypeGT applies the GT predicate on the "sign_up_type" field.
func SignUpTypeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSignUpType, v))
}

// SignUpTypeGTE applies the GTE predicate on the "sign_up_type" field.
func SignUpTypeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSignUpType, v))
}

// SignUpTypeLT applies the LT predicate on the "sign_up_type" field.
func SignUpTypeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSignUpType, v))
}

// SignUpTypeLTE applies the LTE predicate on the "sign_up_type" field.
func SignUpTypeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSignUpType, v))
}

// SignUpTypeContains applies the Contains predicate on the "sign_up_type" field.
func SignUpTypeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSignUpType, v))
}

// SignUpTypeHasPrefix applies the HasPrefix predicate on the "sign_up_type" field.
func SignUpTypeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSignUpType, v))
}

// SignUpTypeHasSuffix applies the HasSuffix predicate on the "sign_up_type" field.
func SignUpTypeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSignUpType, v))
}

// SignUpTypeEqualFold applies the EqualFold predicate on the "sign_up_type" field.
func SignUpTypeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSignUpType, v))
}

// SignUpTypeContainsFold applies the ContainsFold predicate on the "sign_up_type" field.
func SignUpTypeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSignUpType, v))
}

// HasOrderHistories applies the HasEdge predicate on the "order_histories" edge.
func HasOrderHistories() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoriesTable, OrderHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHistoriesWith applies the HasEdge predicate on the "order_histories" edge with a given conditions (other predicates).
func HasOrderHistoriesWith(preds ...predicate.OrderHistory) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOrderHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserAddress applies the HasEdge predicate on the "user_address" edge.
func HasUserAddress() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAddressTable, UserAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAddressWith applies the HasEdge predicate on the "user_address" edge with a given conditions (other predicates).
func HasUserAddressWith(preds ...predicate.UserAddress) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
