// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "user_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldKrName holds the string denoting the kr_name field in the database.
	FieldKrName = "kr_name"
	// FieldRegisterAt holds the string denoting the register_at field in the database.
	FieldRegisterAt = "register_at"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldSignUpType holds the string denoting the sign_up_type field in the database.
	FieldSignUpType = "sign_up_type"
	// EdgeOrderHistories holds the string denoting the order_histories edge name in mutations.
	EdgeOrderHistories = "order_histories"
	// EdgeUserAddress holds the string denoting the user_address edge name in mutations.
	EdgeUserAddress = "user_address"
	// OrderHistoryFieldID holds the string denoting the ID field of the OrderHistory.
	OrderHistoryFieldID = "order_id"
	// UserAddressFieldID holds the string denoting the ID field of the UserAddress.
	UserAddressFieldID = "address_id"
	// Table holds the table name of the user in the database.
	Table = "user"
	// OrderHistoriesTable is the table that holds the order_histories relation/edge.
	OrderHistoriesTable = "order_history"
	// OrderHistoriesInverseTable is the table name for the OrderHistory entity.
	// It exists in this package in order to avoid circular dependency with the "orderhistory" package.
	OrderHistoriesInverseTable = "order_history"
	// OrderHistoriesColumn is the table column denoting the order_histories relation/edge.
	OrderHistoriesColumn = "user_id"
	// UserAddressTable is the table that holds the user_address relation/edge.
	UserAddressTable = "user_address"
	// UserAddressInverseTable is the table name for the UserAddress entity.
	// It exists in this package in order to avoid circular dependency with the "useraddress" package.
	UserAddressInverseTable = "user_address"
	// UserAddressColumn is the table column denoting the user_address relation/edge.
	UserAddressColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
	FieldKrName,
	FieldRegisterAt,
	FieldLastLogin,
	FieldSignUpType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByKrName orders the results by the kr_name field.
func ByKrName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKrName, opts...).ToFunc()
}

// ByRegisterAt orders the results by the register_at field.
func ByRegisterAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterAt, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// BySignUpType orders the results by the sign_up_type field.
func BySignUpType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignUpType, opts...).ToFunc()
}

// ByOrderHistoriesCount orders the results by order_histories count.
func ByOrderHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderHistoriesStep(), opts...)
	}
}

// ByOrderHistories orders the results by order_histories terms.
func ByOrderHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserAddressCount orders the results by user_address count.
func ByUserAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAddressStep(), opts...)
	}
}

// ByUserAddress orders the results by user_address terms.
func ByUserAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrderHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderHistoriesInverseTable, OrderHistoryFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoriesTable, OrderHistoriesColumn),
	)
}
func newUserAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAddressInverseTable, UserAddressFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAddressTable, UserAddressColumn),
	)
}
