// Code generated by ent, DO NOT EDIT.

package ent

import (
	"product-server/ent/user"
	"product-server/ent/useraddress"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserAddress is the model entity for the UserAddress schema.
type UserAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// KrName holds the value of the "kr_name" field.
	KrName string `json:"kr_name,omitempty"`
	// EnName holds the value of the "en_name" field.
	EnName string `json:"en_name,omitempty"`
	// CustomID holds the value of the "custom_id" field.
	CustomID string `json:"custom_id,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// KrAddress holds the value of the "kr_address" field.
	KrAddress string `json:"kr_address,omitempty"`
	// KrAddressDetail holds the value of the "kr_address_detail" field.
	KrAddressDetail string `json:"kr_address_detail,omitempty"`
	// EnAddress holds the value of the "en_address" field.
	EnAddress string `json:"en_address,omitempty"`
	// EnAddressDetail holds the value of the "en_address_detail" field.
	EnAddressDetail string `json:"en_address_detail,omitempty"`
	// Permanent holds the value of the "permanent" field.
	Permanent bool `json:"permanent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAddressQuery when eager-loading is set.
	Edges        UserAddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAddressEdges holds the relations/edges for other nodes in the graph.
type UserAddressEdges struct {
	// OrderHistories holds the value of the order_histories edge.
	OrderHistories []*OrderHistory `json:"order_histories,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderHistoriesOrErr returns the OrderHistories value or an error if the edge
// was not loaded in eager-loading.
func (e UserAddressEdges) OrderHistoriesOrErr() ([]*OrderHistory, error) {
	if e.loadedTypes[0] {
		return e.OrderHistories, nil
	}
	return nil, &NotLoadedError{edge: "order_histories"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAddressEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraddress.FieldPermanent:
			values[i] = new(sql.NullBool)
		case useraddress.FieldID, useraddress.FieldUserID, useraddress.FieldKrName, useraddress.FieldEnName, useraddress.FieldCustomID, useraddress.FieldPhone, useraddress.FieldKrAddress, useraddress.FieldKrAddressDetail, useraddress.FieldEnAddress, useraddress.FieldEnAddressDetail:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAddress fields.
func (ua *UserAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraddress.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ua.ID = value.String
			}
		case useraddress.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ua.UserID = value.String
			}
		case useraddress.FieldKrName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kr_name", values[i])
			} else if value.Valid {
				ua.KrName = value.String
			}
		case useraddress.FieldEnName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field en_name", values[i])
			} else if value.Valid {
				ua.EnName = value.String
			}
		case useraddress.FieldCustomID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_id", values[i])
			} else if value.Valid {
				ua.CustomID = value.String
			}
		case useraddress.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ua.Phone = value.String
			}
		case useraddress.FieldKrAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kr_address", values[i])
			} else if value.Valid {
				ua.KrAddress = value.String
			}
		case useraddress.FieldKrAddressDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kr_address_detail", values[i])
			} else if value.Valid {
				ua.KrAddressDetail = value.String
			}
		case useraddress.FieldEnAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field en_address", values[i])
			} else if value.Valid {
				ua.EnAddress = value.String
			}
		case useraddress.FieldEnAddressDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field en_address_detail", values[i])
			} else if value.Valid {
				ua.EnAddressDetail = value.String
			}
		case useraddress.FieldPermanent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field permanent", values[i])
			} else if value.Valid {
				ua.Permanent = value.Bool
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAddress.
// This includes values selected through modifiers, order, etc.
func (ua *UserAddress) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryOrderHistories queries the "order_histories" edge of the UserAddress entity.
func (ua *UserAddress) QueryOrderHistories() *OrderHistoryQuery {
	return NewUserAddressClient(ua.config).QueryOrderHistories(ua)
}

// QueryUser queries the "user" edge of the UserAddress entity.
func (ua *UserAddress) QueryUser() *UserQuery {
	return NewUserAddressClient(ua.config).QueryUser(ua)
}

// Update returns a builder for updating this UserAddress.
// Note that you need to call UserAddress.Unwrap() before calling this method if this UserAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAddress) Update() *UserAddressUpdateOne {
	return NewUserAddressClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAddress) Unwrap() *UserAddress {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAddress is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAddress) String() string {
	var builder strings.Builder
	builder.WriteString("UserAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("user_id=")
	builder.WriteString(ua.UserID)
	builder.WriteString(", ")
	builder.WriteString("kr_name=")
	builder.WriteString(ua.KrName)
	builder.WriteString(", ")
	builder.WriteString("en_name=")
	builder.WriteString(ua.EnName)
	builder.WriteString(", ")
	builder.WriteString("custom_id=")
	builder.WriteString(ua.CustomID)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ua.Phone)
	builder.WriteString(", ")
	builder.WriteString("kr_address=")
	builder.WriteString(ua.KrAddress)
	builder.WriteString(", ")
	builder.WriteString("kr_address_detail=")
	builder.WriteString(ua.KrAddressDetail)
	builder.WriteString(", ")
	builder.WriteString("en_address=")
	builder.WriteString(ua.EnAddress)
	builder.WriteString(", ")
	builder.WriteString("en_address_detail=")
	builder.WriteString(ua.EnAddressDetail)
	builder.WriteString(", ")
	builder.WriteString("permanent=")
	builder.WriteString(fmt.Sprintf("%v", ua.Permanent))
	builder.WriteByte(')')
	return builder.String()
}

// UserAddresses is a parsable slice of UserAddress.
type UserAddresses []*UserAddress
