// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// OrderHistoryColumns holds the columns for the "order_history" table.
	OrderHistoryColumns = []*schema.Column{
		{Name: "order_id", Type: field.TypeString},
		{Name: "ordered_at", Type: field.TypeTime},
		{Name: "user_order_number", Type: field.TypeInt32},
		{Name: "order_status", Type: field.TypeString},
		{Name: "order_total_price", Type: field.TypeInt32},
		{Name: "payment_method", Type: field.TypeString},
		{Name: "payment_status", Type: field.TypeString},
		{Name: "payment_info", Type: field.TypeString, Nullable: true},
		{Name: "payment_key", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
		{Name: "address_id", Type: field.TypeString, Nullable: true},
	}
	// OrderHistoryTable holds the schema information for the "order_history" table.
	OrderHistoryTable = &schema.Table{
		Name:       "order_history",
		Columns:    OrderHistoryColumns,
		PrimaryKey: []*schema.Column{OrderHistoryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_history_user_order_histories",
				Columns:    []*schema.Column{OrderHistoryColumns[9]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_history_user_address_order_histories",
				Columns:    []*schema.Column{OrderHistoryColumns[10]},
				RefColumns: []*schema.Column{UserAddressColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrderRowColumns holds the columns for the "order_row" table.
	OrderRowColumns = []*schema.Column{
		{Name: "order_row_id", Type: field.TypeInt32, Increment: true},
		{Name: "size", Type: field.TypeString},
		{Name: "quantity", Type: field.TypeInt32},
		{Name: "delivery_status", Type: field.TypeString},
		{Name: "delivery_company", Type: field.TypeString, Nullable: true},
		{Name: "delivery_number", Type: field.TypeString, Nullable: true},
		{Name: "order_id", Type: field.TypeString, Nullable: true},
		{Name: "sku", Type: field.TypeInt32, Nullable: true},
	}
	// OrderRowTable holds the schema information for the "order_row" table.
	OrderRowTable = &schema.Table{
		Name:       "order_row",
		Columns:    OrderRowColumns,
		PrimaryKey: []*schema.Column{OrderRowColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_row_order_history_order_rows",
				Columns:    []*schema.Column{OrderRowColumns[6]},
				RefColumns: []*schema.Column{OrderHistoryColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_row_product_info_order_rows",
				Columns:    []*schema.Column{OrderRowColumns[7]},
				RefColumns: []*schema.Column{ProductInfoColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductInfoColumns holds the columns for the "product_info" table.
	ProductInfoColumns = []*schema.Column{
		{Name: "sku", Type: field.TypeInt32, Increment: true},
		{Name: "brand", Type: field.TypeString, Nullable: true},
		{Name: "product_name", Type: field.TypeString, Nullable: true},
		{Name: "product_id", Type: field.TypeString, Nullable: true},
		{Name: "shipping_fee", Type: field.TypeInt32, Nullable: true},
		{Name: "price", Type: field.TypeInt32, Nullable: true},
		{Name: "intl", Type: field.TypeBool, Nullable: true},
		{Name: "search_info", Type: field.TypeString, Nullable: true},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "category", Type: field.TypeString, Nullable: true},
		{Name: "category_spec", Type: field.TypeString, Nullable: true},
		{Name: "img_type", Type: field.TypeString, Nullable: true},
		{Name: "price_desc_cursor", Type: field.TypeString, Nullable: true},
		{Name: "price_asc_cursor", Type: field.TypeString, Nullable: true},
		{Name: "deploy", Type: field.TypeInt32, Nullable: true},
		{Name: "kor_product_name", Type: field.TypeString, Nullable: true},
		{Name: "kor_brand", Type: field.TypeString, Nullable: true},
	}
	// ProductInfoTable holds the schema information for the "product_info" table.
	ProductInfoTable = &schema.Table{
		Name:       "product_info",
		Columns:    ProductInfoColumns,
		PrimaryKey: []*schema.Column{ProductInfoColumns[0]},
	}
	// SizeColumns holds the columns for the "size" table.
	SizeColumns = []*schema.Column{
		{Name: "size_id", Type: field.TypeInt32, Increment: true},
		{Name: "size", Type: field.TypeString},
		{Name: "available", Type: field.TypeBool},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "sku", Type: field.TypeInt32, Nullable: true},
	}
	// SizeTable holds the schema information for the "size" table.
	SizeTable = &schema.Table{
		Name:       "size",
		Columns:    SizeColumns,
		PrimaryKey: []*schema.Column{SizeColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "size_product_info_sizes",
				Columns:    []*schema.Column{SizeColumns[4]},
				RefColumns: []*schema.Column{ProductInfoColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "kr_name", Type: field.TypeString},
		{Name: "register_at", Type: field.TypeTime},
		{Name: "last_login", Type: field.TypeTime},
		{Name: "sign_up_type", Type: field.TypeString},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// UserAddressColumns holds the columns for the "user_address" table.
	UserAddressColumns = []*schema.Column{
		{Name: "address_id", Type: field.TypeString},
		{Name: "kr_name", Type: field.TypeString},
		{Name: "en_name", Type: field.TypeString},
		{Name: "custom_id", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "kr_address", Type: field.TypeString},
		{Name: "kr_address_detail", Type: field.TypeString},
		{Name: "en_address", Type: field.TypeString},
		{Name: "en_address_detail", Type: field.TypeString},
		{Name: "permanent", Type: field.TypeBool},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// UserAddressTable holds the schema information for the "user_address" table.
	UserAddressTable = &schema.Table{
		Name:       "user_address",
		Columns:    UserAddressColumns,
		PrimaryKey: []*schema.Column{UserAddressColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_address_user_user_address",
				Columns:    []*schema.Column{UserAddressColumns[10]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		OrderHistoryTable,
		OrderRowTable,
		ProductInfoTable,
		SizeTable,
		UserTable,
		UserAddressTable,
	}
)

func init() {
	OrderHistoryTable.ForeignKeys[0].RefTable = UserTable
	OrderHistoryTable.ForeignKeys[1].RefTable = UserAddressTable
	OrderHistoryTable.Annotation = &entsql.Annotation{
		Table: "order_history",
	}
	OrderRowTable.ForeignKeys[0].RefTable = OrderHistoryTable
	OrderRowTable.ForeignKeys[1].RefTable = ProductInfoTable
	OrderRowTable.Annotation = &entsql.Annotation{
		Table: "order_row",
	}
	ProductInfoTable.Annotation = &entsql.Annotation{
		Table: "product_info",
	}
	SizeTable.ForeignKeys[0].RefTable = ProductInfoTable
	SizeTable.Annotation = &entsql.Annotation{
		Table: "size",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	UserAddressTable.ForeignKeys[0].RefTable = UserTable
	UserAddressTable.Annotation = &entsql.Annotation{
		Table: "user_address",
	}
}
