// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderhistory"
	"product-server/ent/user"
	"product-server/ent/useraddress"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAddressCreate is the builder for creating a UserAddress entity.
type UserAddressCreate struct {
	config
	mutation *UserAddressMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uac *UserAddressCreate) SetUserID(s string) *UserAddressCreate {
	uac.mutation.SetUserID(s)
	return uac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uac *UserAddressCreate) SetNillableUserID(s *string) *UserAddressCreate {
	if s != nil {
		uac.SetUserID(*s)
	}
	return uac
}

// SetKrName sets the "kr_name" field.
func (uac *UserAddressCreate) SetKrName(s string) *UserAddressCreate {
	uac.mutation.SetKrName(s)
	return uac
}

// SetEnName sets the "en_name" field.
func (uac *UserAddressCreate) SetEnName(s string) *UserAddressCreate {
	uac.mutation.SetEnName(s)
	return uac
}

// SetCustomID sets the "custom_id" field.
func (uac *UserAddressCreate) SetCustomID(s string) *UserAddressCreate {
	uac.mutation.SetCustomID(s)
	return uac
}

// SetPhone sets the "phone" field.
func (uac *UserAddressCreate) SetPhone(s string) *UserAddressCreate {
	uac.mutation.SetPhone(s)
	return uac
}

// SetKrAddress sets the "kr_address" field.
func (uac *UserAddressCreate) SetKrAddress(s string) *UserAddressCreate {
	uac.mutation.SetKrAddress(s)
	return uac
}

// SetKrAddressDetail sets the "kr_address_detail" field.
func (uac *UserAddressCreate) SetKrAddressDetail(s string) *UserAddressCreate {
	uac.mutation.SetKrAddressDetail(s)
	return uac
}

// SetEnAddress sets the "en_address" field.
func (uac *UserAddressCreate) SetEnAddress(s string) *UserAddressCreate {
	uac.mutation.SetEnAddress(s)
	return uac
}

// SetEnAddressDetail sets the "en_address_detail" field.
func (uac *UserAddressCreate) SetEnAddressDetail(s string) *UserAddressCreate {
	uac.mutation.SetEnAddressDetail(s)
	return uac
}

// SetPermanent sets the "permanent" field.
func (uac *UserAddressCreate) SetPermanent(b bool) *UserAddressCreate {
	uac.mutation.SetPermanent(b)
	return uac
}

// SetID sets the "id" field.
func (uac *UserAddressCreate) SetID(s string) *UserAddressCreate {
	uac.mutation.SetID(s)
	return uac
}

// AddOrderHistoryIDs adds the "order_histories" edge to the OrderHistory entity by IDs.
func (uac *UserAddressCreate) AddOrderHistoryIDs(ids ...string) *UserAddressCreate {
	uac.mutation.AddOrderHistoryIDs(ids...)
	return uac
}

// AddOrderHistories adds the "order_histories" edges to the OrderHistory entity.
func (uac *UserAddressCreate) AddOrderHistories(o ...*OrderHistory) *UserAddressCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uac.AddOrderHistoryIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (uac *UserAddressCreate) SetUser(u *User) *UserAddressCreate {
	return uac.SetUserID(u.ID)
}

// Mutation returns the UserAddressMutation object of the builder.
func (uac *UserAddressCreate) Mutation() *UserAddressMutation {
	return uac.mutation
}

// Save creates the UserAddress in the database.
func (uac *UserAddressCreate) Save(ctx context.Context) (*UserAddress, error) {
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAddressCreate) SaveX(ctx context.Context) *UserAddress {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAddressCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAddressCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAddressCreate) check() error {
	if _, ok := uac.mutation.KrName(); !ok {
		return &ValidationError{Name: "kr_name", err: errors.New(`ent: missing required field "UserAddress.kr_name"`)}
	}
	if _, ok := uac.mutation.EnName(); !ok {
		return &ValidationError{Name: "en_name", err: errors.New(`ent: missing required field "UserAddress.en_name"`)}
	}
	if _, ok := uac.mutation.CustomID(); !ok {
		return &ValidationError{Name: "custom_id", err: errors.New(`ent: missing required field "UserAddress.custom_id"`)}
	}
	if _, ok := uac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "UserAddress.phone"`)}
	}
	if _, ok := uac.mutation.KrAddress(); !ok {
		return &ValidationError{Name: "kr_address", err: errors.New(`ent: missing required field "UserAddress.kr_address"`)}
	}
	if _, ok := uac.mutation.KrAddressDetail(); !ok {
		return &ValidationError{Name: "kr_address_detail", err: errors.New(`ent: missing required field "UserAddress.kr_address_detail"`)}
	}
	if _, ok := uac.mutation.EnAddress(); !ok {
		return &ValidationError{Name: "en_address", err: errors.New(`ent: missing required field "UserAddress.en_address"`)}
	}
	if _, ok := uac.mutation.EnAddressDetail(); !ok {
		return &ValidationError{Name: "en_address_detail", err: errors.New(`ent: missing required field "UserAddress.en_address_detail"`)}
	}
	if _, ok := uac.mutation.Permanent(); !ok {
		return &ValidationError{Name: "permanent", err: errors.New(`ent: missing required field "UserAddress.permanent"`)}
	}
	return nil
}

func (uac *UserAddressCreate) sqlSave(ctx context.Context) (*UserAddress, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserAddress.ID type: %T", _spec.ID.Value)
		}
	}
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAddressCreate) createSpec() (*UserAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAddress{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(useraddress.Table, sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeString))
	)
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uac.mutation.KrName(); ok {
		_spec.SetField(useraddress.FieldKrName, field.TypeString, value)
		_node.KrName = value
	}
	if value, ok := uac.mutation.EnName(); ok {
		_spec.SetField(useraddress.FieldEnName, field.TypeString, value)
		_node.EnName = value
	}
	if value, ok := uac.mutation.CustomID(); ok {
		_spec.SetField(useraddress.FieldCustomID, field.TypeString, value)
		_node.CustomID = value
	}
	if value, ok := uac.mutation.Phone(); ok {
		_spec.SetField(useraddress.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uac.mutation.KrAddress(); ok {
		_spec.SetField(useraddress.FieldKrAddress, field.TypeString, value)
		_node.KrAddress = value
	}
	if value, ok := uac.mutation.KrAddressDetail(); ok {
		_spec.SetField(useraddress.FieldKrAddressDetail, field.TypeString, value)
		_node.KrAddressDetail = value
	}
	if value, ok := uac.mutation.EnAddress(); ok {
		_spec.SetField(useraddress.FieldEnAddress, field.TypeString, value)
		_node.EnAddress = value
	}
	if value, ok := uac.mutation.EnAddressDetail(); ok {
		_spec.SetField(useraddress.FieldEnAddressDetail, field.TypeString, value)
		_node.EnAddressDetail = value
	}
	if value, ok := uac.mutation.Permanent(); ok {
		_spec.SetField(useraddress.FieldPermanent, field.TypeBool, value)
		_node.Permanent = value
	}
	if nodes := uac.mutation.OrderHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraddress.OrderHistoriesTable,
			Columns: []string{useraddress.OrderHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraddress.UserTable,
			Columns: []string{useraddress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserAddressCreateBulk is the builder for creating many UserAddress entities in bulk.
type UserAddressCreateBulk struct {
	config
	err      error
	builders []*UserAddressCreate
}

// Save creates the UserAddress entities in the database.
func (uacb *UserAddressCreateBulk) Save(ctx context.Context) ([]*UserAddress, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAddress, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAddressCreateBulk) SaveX(ctx context.Context) []*UserAddress {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAddressCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
