// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/predicate"
	"product-server/ent/user"
	"product-server/ent/useraddress"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderHistoryUpdate is the builder for updating OrderHistory entities.
type OrderHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *OrderHistoryMutation
}

// Where appends a list predicates to the OrderHistoryUpdate builder.
func (ohu *OrderHistoryUpdate) Where(ps ...predicate.OrderHistory) *OrderHistoryUpdate {
	ohu.mutation.Where(ps...)
	return ohu
}

// SetUserID sets the "user_id" field.
func (ohu *OrderHistoryUpdate) SetUserID(s string) *OrderHistoryUpdate {
	ohu.mutation.SetUserID(s)
	return ohu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableUserID(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetUserID(*s)
	}
	return ohu
}

// ClearUserID clears the value of the "user_id" field.
func (ohu *OrderHistoryUpdate) ClearUserID() *OrderHistoryUpdate {
	ohu.mutation.ClearUserID()
	return ohu
}

// SetAddressID sets the "address_id" field.
func (ohu *OrderHistoryUpdate) SetAddressID(s string) *OrderHistoryUpdate {
	ohu.mutation.SetAddressID(s)
	return ohu
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableAddressID(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetAddressID(*s)
	}
	return ohu
}

// ClearAddressID clears the value of the "address_id" field.
func (ohu *OrderHistoryUpdate) ClearAddressID() *OrderHistoryUpdate {
	ohu.mutation.ClearAddressID()
	return ohu
}

// SetOrderedAt sets the "ordered_at" field.
func (ohu *OrderHistoryUpdate) SetOrderedAt(t time.Time) *OrderHistoryUpdate {
	ohu.mutation.SetOrderedAt(t)
	return ohu
}

// SetNillableOrderedAt sets the "ordered_at" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableOrderedAt(t *time.Time) *OrderHistoryUpdate {
	if t != nil {
		ohu.SetOrderedAt(*t)
	}
	return ohu
}

// SetUserOrderNumber sets the "user_order_number" field.
func (ohu *OrderHistoryUpdate) SetUserOrderNumber(i int32) *OrderHistoryUpdate {
	ohu.mutation.ResetUserOrderNumber()
	ohu.mutation.SetUserOrderNumber(i)
	return ohu
}

// SetNillableUserOrderNumber sets the "user_order_number" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableUserOrderNumber(i *int32) *OrderHistoryUpdate {
	if i != nil {
		ohu.SetUserOrderNumber(*i)
	}
	return ohu
}

// AddUserOrderNumber adds i to the "user_order_number" field.
func (ohu *OrderHistoryUpdate) AddUserOrderNumber(i int32) *OrderHistoryUpdate {
	ohu.mutation.AddUserOrderNumber(i)
	return ohu
}

// SetOrderStatus sets the "order_status" field.
func (ohu *OrderHistoryUpdate) SetOrderStatus(s string) *OrderHistoryUpdate {
	ohu.mutation.SetOrderStatus(s)
	return ohu
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableOrderStatus(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetOrderStatus(*s)
	}
	return ohu
}

// SetOrderTotalPrice sets the "order_total_price" field.
func (ohu *OrderHistoryUpdate) SetOrderTotalPrice(i int32) *OrderHistoryUpdate {
	ohu.mutation.ResetOrderTotalPrice()
	ohu.mutation.SetOrderTotalPrice(i)
	return ohu
}

// SetNillableOrderTotalPrice sets the "order_total_price" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableOrderTotalPrice(i *int32) *OrderHistoryUpdate {
	if i != nil {
		ohu.SetOrderTotalPrice(*i)
	}
	return ohu
}

// AddOrderTotalPrice adds i to the "order_total_price" field.
func (ohu *OrderHistoryUpdate) AddOrderTotalPrice(i int32) *OrderHistoryUpdate {
	ohu.mutation.AddOrderTotalPrice(i)
	return ohu
}

// SetPaymentMethod sets the "payment_method" field.
func (ohu *OrderHistoryUpdate) SetPaymentMethod(s string) *OrderHistoryUpdate {
	ohu.mutation.SetPaymentMethod(s)
	return ohu
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillablePaymentMethod(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetPaymentMethod(*s)
	}
	return ohu
}

// SetPaymentStatus sets the "payment_status" field.
func (ohu *OrderHistoryUpdate) SetPaymentStatus(s string) *OrderHistoryUpdate {
	ohu.mutation.SetPaymentStatus(s)
	return ohu
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillablePaymentStatus(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetPaymentStatus(*s)
	}
	return ohu
}

// SetPaymentInfo sets the "payment_info" field.
func (ohu *OrderHistoryUpdate) SetPaymentInfo(s string) *OrderHistoryUpdate {
	ohu.mutation.SetPaymentInfo(s)
	return ohu
}

// SetNillablePaymentInfo sets the "payment_info" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillablePaymentInfo(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetPaymentInfo(*s)
	}
	return ohu
}

// ClearPaymentInfo clears the value of the "payment_info" field.
func (ohu *OrderHistoryUpdate) ClearPaymentInfo() *OrderHistoryUpdate {
	ohu.mutation.ClearPaymentInfo()
	return ohu
}

// SetPaymentKey sets the "payment_key" field.
func (ohu *OrderHistoryUpdate) SetPaymentKey(s string) *OrderHistoryUpdate {
	ohu.mutation.SetPaymentKey(s)
	return ohu
}

// SetNillablePaymentKey sets the "payment_key" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillablePaymentKey(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetPaymentKey(*s)
	}
	return ohu
}

// SetUser sets the "user" edge to the User entity.
func (ohu *OrderHistoryUpdate) SetUser(u *User) *OrderHistoryUpdate {
	return ohu.SetUserID(u.ID)
}

// SetUserAddreID sets the "user_addre" edge to the UserAddress entity by ID.
func (ohu *OrderHistoryUpdate) SetUserAddreID(id string) *OrderHistoryUpdate {
	ohu.mutation.SetUserAddreID(id)
	return ohu
}

// SetNillableUserAddreID sets the "user_addre" edge to the UserAddress entity by ID if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableUserAddreID(id *string) *OrderHistoryUpdate {
	if id != nil {
		ohu = ohu.SetUserAddreID(*id)
	}
	return ohu
}

// SetUserAddre sets the "user_addre" edge to the UserAddress entity.
func (ohu *OrderHistoryUpdate) SetUserAddre(u *UserAddress) *OrderHistoryUpdate {
	return ohu.SetUserAddreID(u.ID)
}

// AddOrderRowIDs adds the "order_rows" edge to the OrderRow entity by IDs.
func (ohu *OrderHistoryUpdate) AddOrderRowIDs(ids ...int32) *OrderHistoryUpdate {
	ohu.mutation.AddOrderRowIDs(ids...)
	return ohu
}

// AddOrderRows adds the "order_rows" edges to the OrderRow entity.
func (ohu *OrderHistoryUpdate) AddOrderRows(o ...*OrderRow) *OrderHistoryUpdate {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderRowIDs(ids...)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohu *OrderHistoryUpdate) Mutation() *OrderHistoryMutation {
	return ohu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ohu *OrderHistoryUpdate) ClearUser() *OrderHistoryUpdate {
	ohu.mutation.ClearUser()
	return ohu
}

// ClearUserAddre clears the "user_addre" edge to the UserAddress entity.
func (ohu *OrderHistoryUpdate) ClearUserAddre() *OrderHistoryUpdate {
	ohu.mutation.ClearUserAddre()
	return ohu
}

// ClearOrderRows clears all "order_rows" edges to the OrderRow entity.
func (ohu *OrderHistoryUpdate) ClearOrderRows() *OrderHistoryUpdate {
	ohu.mutation.ClearOrderRows()
	return ohu
}

// RemoveOrderRowIDs removes the "order_rows" edge to OrderRow entities by IDs.
func (ohu *OrderHistoryUpdate) RemoveOrderRowIDs(ids ...int32) *OrderHistoryUpdate {
	ohu.mutation.RemoveOrderRowIDs(ids...)
	return ohu
}

// RemoveOrderRows removes "order_rows" edges to OrderRow entities.
func (ohu *OrderHistoryUpdate) RemoveOrderRows(o ...*OrderRow) *OrderHistoryUpdate {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderRowIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ohu *OrderHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ohu.sqlSave, ohu.mutation, ohu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohu *OrderHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ohu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ohu *OrderHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ohu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohu *OrderHistoryUpdate) ExecX(ctx context.Context) {
	if err := ohu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ohu *OrderHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	if ps := ohu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohu.mutation.OrderedAt(); ok {
		_spec.SetField(orderhistory.FieldOrderedAt, field.TypeTime, value)
	}
	if value, ok := ohu.mutation.UserOrderNumber(); ok {
		_spec.SetField(orderhistory.FieldUserOrderNumber, field.TypeInt32, value)
	}
	if value, ok := ohu.mutation.AddedUserOrderNumber(); ok {
		_spec.AddField(orderhistory.FieldUserOrderNumber, field.TypeInt32, value)
	}
	if value, ok := ohu.mutation.OrderStatus(); ok {
		_spec.SetField(orderhistory.FieldOrderStatus, field.TypeString, value)
	}
	if value, ok := ohu.mutation.OrderTotalPrice(); ok {
		_spec.SetField(orderhistory.FieldOrderTotalPrice, field.TypeInt32, value)
	}
	if value, ok := ohu.mutation.AddedOrderTotalPrice(); ok {
		_spec.AddField(orderhistory.FieldOrderTotalPrice, field.TypeInt32, value)
	}
	if value, ok := ohu.mutation.PaymentMethod(); ok {
		_spec.SetField(orderhistory.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := ohu.mutation.PaymentStatus(); ok {
		_spec.SetField(orderhistory.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ohu.mutation.PaymentInfo(); ok {
		_spec.SetField(orderhistory.FieldPaymentInfo, field.TypeString, value)
	}
	if ohu.mutation.PaymentInfoCleared() {
		_spec.ClearField(orderhistory.FieldPaymentInfo, field.TypeString)
	}
	if value, ok := ohu.mutation.PaymentKey(); ok {
		_spec.SetField(orderhistory.FieldPaymentKey, field.TypeString, value)
	}
	if ohu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserTable,
			Columns: []string{orderhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserTable,
			Columns: []string{orderhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.UserAddreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserAddreTable,
			Columns: []string{orderhistory.UserAddreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.UserAddreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserAddreTable,
			Columns: []string{orderhistory.UserAddreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderRowsIDs(); len(nodes) > 0 && !ohu.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ohu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ohu.mutation.done = true
	return n, nil
}

// OrderHistoryUpdateOne is the builder for updating a single OrderHistory entity.
type OrderHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderHistoryMutation
}

// SetUserID sets the "user_id" field.
func (ohuo *OrderHistoryUpdateOne) SetUserID(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetUserID(s)
	return ohuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableUserID(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetUserID(*s)
	}
	return ohuo
}

// ClearUserID clears the value of the "user_id" field.
func (ohuo *OrderHistoryUpdateOne) ClearUserID() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearUserID()
	return ohuo
}

// SetAddressID sets the "address_id" field.
func (ohuo *OrderHistoryUpdateOne) SetAddressID(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetAddressID(s)
	return ohuo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableAddressID(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetAddressID(*s)
	}
	return ohuo
}

// ClearAddressID clears the value of the "address_id" field.
func (ohuo *OrderHistoryUpdateOne) ClearAddressID() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearAddressID()
	return ohuo
}

// SetOrderedAt sets the "ordered_at" field.
func (ohuo *OrderHistoryUpdateOne) SetOrderedAt(t time.Time) *OrderHistoryUpdateOne {
	ohuo.mutation.SetOrderedAt(t)
	return ohuo
}

// SetNillableOrderedAt sets the "ordered_at" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableOrderedAt(t *time.Time) *OrderHistoryUpdateOne {
	if t != nil {
		ohuo.SetOrderedAt(*t)
	}
	return ohuo
}

// SetUserOrderNumber sets the "user_order_number" field.
func (ohuo *OrderHistoryUpdateOne) SetUserOrderNumber(i int32) *OrderHistoryUpdateOne {
	ohuo.mutation.ResetUserOrderNumber()
	ohuo.mutation.SetUserOrderNumber(i)
	return ohuo
}

// SetNillableUserOrderNumber sets the "user_order_number" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableUserOrderNumber(i *int32) *OrderHistoryUpdateOne {
	if i != nil {
		ohuo.SetUserOrderNumber(*i)
	}
	return ohuo
}

// AddUserOrderNumber adds i to the "user_order_number" field.
func (ohuo *OrderHistoryUpdateOne) AddUserOrderNumber(i int32) *OrderHistoryUpdateOne {
	ohuo.mutation.AddUserOrderNumber(i)
	return ohuo
}

// SetOrderStatus sets the "order_status" field.
func (ohuo *OrderHistoryUpdateOne) SetOrderStatus(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetOrderStatus(s)
	return ohuo
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableOrderStatus(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetOrderStatus(*s)
	}
	return ohuo
}

// SetOrderTotalPrice sets the "order_total_price" field.
func (ohuo *OrderHistoryUpdateOne) SetOrderTotalPrice(i int32) *OrderHistoryUpdateOne {
	ohuo.mutation.ResetOrderTotalPrice()
	ohuo.mutation.SetOrderTotalPrice(i)
	return ohuo
}

// SetNillableOrderTotalPrice sets the "order_total_price" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableOrderTotalPrice(i *int32) *OrderHistoryUpdateOne {
	if i != nil {
		ohuo.SetOrderTotalPrice(*i)
	}
	return ohuo
}

// AddOrderTotalPrice adds i to the "order_total_price" field.
func (ohuo *OrderHistoryUpdateOne) AddOrderTotalPrice(i int32) *OrderHistoryUpdateOne {
	ohuo.mutation.AddOrderTotalPrice(i)
	return ohuo
}

// SetPaymentMethod sets the "payment_method" field.
func (ohuo *OrderHistoryUpdateOne) SetPaymentMethod(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetPaymentMethod(s)
	return ohuo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillablePaymentMethod(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetPaymentMethod(*s)
	}
	return ohuo
}

// SetPaymentStatus sets the "payment_status" field.
func (ohuo *OrderHistoryUpdateOne) SetPaymentStatus(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetPaymentStatus(s)
	return ohuo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillablePaymentStatus(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetPaymentStatus(*s)
	}
	return ohuo
}

// SetPaymentInfo sets the "payment_info" field.
func (ohuo *OrderHistoryUpdateOne) SetPaymentInfo(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetPaymentInfo(s)
	return ohuo
}

// SetNillablePaymentInfo sets the "payment_info" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillablePaymentInfo(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetPaymentInfo(*s)
	}
	return ohuo
}

// ClearPaymentInfo clears the value of the "payment_info" field.
func (ohuo *OrderHistoryUpdateOne) ClearPaymentInfo() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearPaymentInfo()
	return ohuo
}

// SetPaymentKey sets the "payment_key" field.
func (ohuo *OrderHistoryUpdateOne) SetPaymentKey(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetPaymentKey(s)
	return ohuo
}

// SetNillablePaymentKey sets the "payment_key" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillablePaymentKey(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetPaymentKey(*s)
	}
	return ohuo
}

// SetUser sets the "user" edge to the User entity.
func (ohuo *OrderHistoryUpdateOne) SetUser(u *User) *OrderHistoryUpdateOne {
	return ohuo.SetUserID(u.ID)
}

// SetUserAddreID sets the "user_addre" edge to the UserAddress entity by ID.
func (ohuo *OrderHistoryUpdateOne) SetUserAddreID(id string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetUserAddreID(id)
	return ohuo
}

// SetNillableUserAddreID sets the "user_addre" edge to the UserAddress entity by ID if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableUserAddreID(id *string) *OrderHistoryUpdateOne {
	if id != nil {
		ohuo = ohuo.SetUserAddreID(*id)
	}
	return ohuo
}

// SetUserAddre sets the "user_addre" edge to the UserAddress entity.
func (ohuo *OrderHistoryUpdateOne) SetUserAddre(u *UserAddress) *OrderHistoryUpdateOne {
	return ohuo.SetUserAddreID(u.ID)
}

// AddOrderRowIDs adds the "order_rows" edge to the OrderRow entity by IDs.
func (ohuo *OrderHistoryUpdateOne) AddOrderRowIDs(ids ...int32) *OrderHistoryUpdateOne {
	ohuo.mutation.AddOrderRowIDs(ids...)
	return ohuo
}

// AddOrderRows adds the "order_rows" edges to the OrderRow entity.
func (ohuo *OrderHistoryUpdateOne) AddOrderRows(o ...*OrderRow) *OrderHistoryUpdateOne {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderRowIDs(ids...)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohuo *OrderHistoryUpdateOne) Mutation() *OrderHistoryMutation {
	return ohuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ohuo *OrderHistoryUpdateOne) ClearUser() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearUser()
	return ohuo
}

// ClearUserAddre clears the "user_addre" edge to the UserAddress entity.
func (ohuo *OrderHistoryUpdateOne) ClearUserAddre() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearUserAddre()
	return ohuo
}

// ClearOrderRows clears all "order_rows" edges to the OrderRow entity.
func (ohuo *OrderHistoryUpdateOne) ClearOrderRows() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearOrderRows()
	return ohuo
}

// RemoveOrderRowIDs removes the "order_rows" edge to OrderRow entities by IDs.
func (ohuo *OrderHistoryUpdateOne) RemoveOrderRowIDs(ids ...int32) *OrderHistoryUpdateOne {
	ohuo.mutation.RemoveOrderRowIDs(ids...)
	return ohuo
}

// RemoveOrderRows removes "order_rows" edges to OrderRow entities.
func (ohuo *OrderHistoryUpdateOne) RemoveOrderRows(o ...*OrderRow) *OrderHistoryUpdateOne {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderRowIDs(ids...)
}

// Where appends a list predicates to the OrderHistoryUpdate builder.
func (ohuo *OrderHistoryUpdateOne) Where(ps ...predicate.OrderHistory) *OrderHistoryUpdateOne {
	ohuo.mutation.Where(ps...)
	return ohuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ohuo *OrderHistoryUpdateOne) Select(field string, fields ...string) *OrderHistoryUpdateOne {
	ohuo.fields = append([]string{field}, fields...)
	return ohuo
}

// Save executes the query and returns the updated OrderHistory entity.
func (ohuo *OrderHistoryUpdateOne) Save(ctx context.Context) (*OrderHistory, error) {
	return withHooks(ctx, ohuo.sqlSave, ohuo.mutation, ohuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohuo *OrderHistoryUpdateOne) SaveX(ctx context.Context) *OrderHistory {
	node, err := ohuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ohuo *OrderHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ohuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohuo *OrderHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ohuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ohuo *OrderHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrderHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	id, ok := ohuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ohuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderhistory.FieldID)
		for _, f := range fields {
			if !orderhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ohuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohuo.mutation.OrderedAt(); ok {
		_spec.SetField(orderhistory.FieldOrderedAt, field.TypeTime, value)
	}
	if value, ok := ohuo.mutation.UserOrderNumber(); ok {
		_spec.SetField(orderhistory.FieldUserOrderNumber, field.TypeInt32, value)
	}
	if value, ok := ohuo.mutation.AddedUserOrderNumber(); ok {
		_spec.AddField(orderhistory.FieldUserOrderNumber, field.TypeInt32, value)
	}
	if value, ok := ohuo.mutation.OrderStatus(); ok {
		_spec.SetField(orderhistory.FieldOrderStatus, field.TypeString, value)
	}
	if value, ok := ohuo.mutation.OrderTotalPrice(); ok {
		_spec.SetField(orderhistory.FieldOrderTotalPrice, field.TypeInt32, value)
	}
	if value, ok := ohuo.mutation.AddedOrderTotalPrice(); ok {
		_spec.AddField(orderhistory.FieldOrderTotalPrice, field.TypeInt32, value)
	}
	if value, ok := ohuo.mutation.PaymentMethod(); ok {
		_spec.SetField(orderhistory.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := ohuo.mutation.PaymentStatus(); ok {
		_spec.SetField(orderhistory.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ohuo.mutation.PaymentInfo(); ok {
		_spec.SetField(orderhistory.FieldPaymentInfo, field.TypeString, value)
	}
	if ohuo.mutation.PaymentInfoCleared() {
		_spec.ClearField(orderhistory.FieldPaymentInfo, field.TypeString)
	}
	if value, ok := ohuo.mutation.PaymentKey(); ok {
		_spec.SetField(orderhistory.FieldPaymentKey, field.TypeString, value)
	}
	if ohuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserTable,
			Columns: []string{orderhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserTable,
			Columns: []string{orderhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.UserAddreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserAddreTable,
			Columns: []string{orderhistory.UserAddreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.UserAddreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserAddreTable,
			Columns: []string{orderhistory.UserAddreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderRowsIDs(); len(nodes) > 0 && !ohuo.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderHistory{config: ohuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ohuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ohuo.mutation.done = true
	return _node, nil
}
