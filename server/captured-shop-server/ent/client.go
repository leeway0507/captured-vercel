// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"product-server/ent/migrate"

	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/productinfo"
	"product-server/ent/size"
	"product-server/ent/user"
	"product-server/ent/useraddress"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// OrderHistory is the client for interacting with the OrderHistory builders.
	OrderHistory *OrderHistoryClient
	// OrderRow is the client for interacting with the OrderRow builders.
	OrderRow *OrderRowClient
	// ProductInfo is the client for interacting with the ProductInfo builders.
	ProductInfo *ProductInfoClient
	// Size is the client for interacting with the Size builders.
	Size *SizeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserAddress is the client for interacting with the UserAddress builders.
	UserAddress *UserAddressClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.OrderHistory = NewOrderHistoryClient(c.config)
	c.OrderRow = NewOrderRowClient(c.config)
	c.ProductInfo = NewProductInfoClient(c.config)
	c.Size = NewSizeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserAddress = NewUserAddressClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		OrderHistory: NewOrderHistoryClient(cfg),
		OrderRow:     NewOrderRowClient(cfg),
		ProductInfo:  NewProductInfoClient(cfg),
		Size:         NewSizeClient(cfg),
		User:         NewUserClient(cfg),
		UserAddress:  NewUserAddressClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		OrderHistory: NewOrderHistoryClient(cfg),
		OrderRow:     NewOrderRowClient(cfg),
		ProductInfo:  NewProductInfoClient(cfg),
		Size:         NewSizeClient(cfg),
		User:         NewUserClient(cfg),
		UserAddress:  NewUserAddressClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		OrderHistory.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.OrderHistory, c.OrderRow, c.ProductInfo, c.Size, c.User, c.UserAddress,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.OrderHistory, c.OrderRow, c.ProductInfo, c.Size, c.User, c.UserAddress,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OrderHistoryMutation:
		return c.OrderHistory.mutate(ctx, m)
	case *OrderRowMutation:
		return c.OrderRow.mutate(ctx, m)
	case *ProductInfoMutation:
		return c.ProductInfo.mutate(ctx, m)
	case *SizeMutation:
		return c.Size.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserAddressMutation:
		return c.UserAddress.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OrderHistoryClient is a client for the OrderHistory schema.
type OrderHistoryClient struct {
	config
}

// NewOrderHistoryClient returns a client for the OrderHistory from the given config.
func NewOrderHistoryClient(c config) *OrderHistoryClient {
	return &OrderHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderhistory.Hooks(f(g(h())))`.
func (c *OrderHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrderHistory = append(c.hooks.OrderHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderhistory.Intercept(f(g(h())))`.
func (c *OrderHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderHistory = append(c.inters.OrderHistory, interceptors...)
}

// Create returns a builder for creating a OrderHistory entity.
func (c *OrderHistoryClient) Create() *OrderHistoryCreate {
	mutation := newOrderHistoryMutation(c.config, OpCreate)
	return &OrderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderHistory entities.
func (c *OrderHistoryClient) CreateBulk(builders ...*OrderHistoryCreate) *OrderHistoryCreateBulk {
	return &OrderHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderHistoryClient) MapCreateBulk(slice any, setFunc func(*OrderHistoryCreate, int)) *OrderHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderHistoryCreateBulk{err: fmt.Errorf("calling to OrderHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderHistory.
func (c *OrderHistoryClient) Update() *OrderHistoryUpdate {
	mutation := newOrderHistoryMutation(c.config, OpUpdate)
	return &OrderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderHistoryClient) UpdateOne(oh *OrderHistory) *OrderHistoryUpdateOne {
	mutation := newOrderHistoryMutation(c.config, OpUpdateOne, withOrderHistory(oh))
	return &OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderHistoryClient) UpdateOneID(id string) *OrderHistoryUpdateOne {
	mutation := newOrderHistoryMutation(c.config, OpUpdateOne, withOrderHistoryID(id))
	return &OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderHistory.
func (c *OrderHistoryClient) Delete() *OrderHistoryDelete {
	mutation := newOrderHistoryMutation(c.config, OpDelete)
	return &OrderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderHistoryClient) DeleteOne(oh *OrderHistory) *OrderHistoryDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderHistoryClient) DeleteOneID(id string) *OrderHistoryDeleteOne {
	builder := c.Delete().Where(orderhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderHistoryDeleteOne{builder}
}

// Query returns a query builder for OrderHistory.
func (c *OrderHistoryClient) Query() *OrderHistoryQuery {
	return &OrderHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderHistory entity by its id.
func (c *OrderHistoryClient) Get(ctx context.Context, id string) (*OrderHistory, error) {
	return c.Query().Where(orderhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderHistoryClient) GetX(ctx context.Context, id string) *OrderHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a OrderHistory.
func (c *OrderHistoryClient) QueryUser(oh *OrderHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderhistory.UserTable, orderhistory.UserColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserAddre queries the user_addre edge of a OrderHistory.
func (c *OrderHistoryClient) QueryUserAddre(oh *OrderHistory) *UserAddressQuery {
	query := (&UserAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(useraddress.Table, useraddress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderhistory.UserAddreTable, orderhistory.UserAddreColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderRows queries the order_rows edge of a OrderHistory.
func (c *OrderHistoryClient) QueryOrderRows(oh *OrderHistory) *OrderRowQuery {
	query := (&OrderRowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(orderrow.Table, orderrow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderhistory.OrderRowsTable, orderhistory.OrderRowsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderHistoryClient) Hooks() []Hook {
	return c.hooks.OrderHistory
}

// Interceptors returns the client interceptors.
func (c *OrderHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrderHistory
}

func (c *OrderHistoryClient) mutate(ctx context.Context, m *OrderHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderHistory mutation op: %q", m.Op())
	}
}

// OrderRowClient is a client for the OrderRow schema.
type OrderRowClient struct {
	config
}

// NewOrderRowClient returns a client for the OrderRow from the given config.
func NewOrderRowClient(c config) *OrderRowClient {
	return &OrderRowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderrow.Hooks(f(g(h())))`.
func (c *OrderRowClient) Use(hooks ...Hook) {
	c.hooks.OrderRow = append(c.hooks.OrderRow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderrow.Intercept(f(g(h())))`.
func (c *OrderRowClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderRow = append(c.inters.OrderRow, interceptors...)
}

// Create returns a builder for creating a OrderRow entity.
func (c *OrderRowClient) Create() *OrderRowCreate {
	mutation := newOrderRowMutation(c.config, OpCreate)
	return &OrderRowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderRow entities.
func (c *OrderRowClient) CreateBulk(builders ...*OrderRowCreate) *OrderRowCreateBulk {
	return &OrderRowCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderRowClient) MapCreateBulk(slice any, setFunc func(*OrderRowCreate, int)) *OrderRowCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderRowCreateBulk{err: fmt.Errorf("calling to OrderRowClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderRowCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderRowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderRow.
func (c *OrderRowClient) Update() *OrderRowUpdate {
	mutation := newOrderRowMutation(c.config, OpUpdate)
	return &OrderRowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderRowClient) UpdateOne(or *OrderRow) *OrderRowUpdateOne {
	mutation := newOrderRowMutation(c.config, OpUpdateOne, withOrderRow(or))
	return &OrderRowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderRowClient) UpdateOneID(id int32) *OrderRowUpdateOne {
	mutation := newOrderRowMutation(c.config, OpUpdateOne, withOrderRowID(id))
	return &OrderRowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderRow.
func (c *OrderRowClient) Delete() *OrderRowDelete {
	mutation := newOrderRowMutation(c.config, OpDelete)
	return &OrderRowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderRowClient) DeleteOne(or *OrderRow) *OrderRowDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderRowClient) DeleteOneID(id int32) *OrderRowDeleteOne {
	builder := c.Delete().Where(orderrow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderRowDeleteOne{builder}
}

// Query returns a query builder for OrderRow.
func (c *OrderRowClient) Query() *OrderRowQuery {
	return &OrderRowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderRow},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderRow entity by its id.
func (c *OrderRowClient) Get(ctx context.Context, id int32) (*OrderRow, error) {
	return c.Query().Where(orderrow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderRowClient) GetX(ctx context.Context, id int32) *OrderRow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHistory queries the order_history edge of a OrderRow.
func (c *OrderRowClient) QueryOrderHistory(or *OrderRow) *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrow.Table, orderrow.FieldID, id),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderrow.OrderHistoryTable, orderrow.OrderHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductInfo queries the product_info edge of a OrderRow.
func (c *OrderRowClient) QueryProductInfo(or *OrderRow) *ProductInfoQuery {
	query := (&ProductInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrow.Table, orderrow.FieldID, id),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderrow.ProductInfoTable, orderrow.ProductInfoColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderRowClient) Hooks() []Hook {
	return c.hooks.OrderRow
}

// Interceptors returns the client interceptors.
func (c *OrderRowClient) Interceptors() []Interceptor {
	return c.inters.OrderRow
}

func (c *OrderRowClient) mutate(ctx context.Context, m *OrderRowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderRowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderRowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderRowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderRowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderRow mutation op: %q", m.Op())
	}
}

// ProductInfoClient is a client for the ProductInfo schema.
type ProductInfoClient struct {
	config
}

// NewProductInfoClient returns a client for the ProductInfo from the given config.
func NewProductInfoClient(c config) *ProductInfoClient {
	return &ProductInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productinfo.Hooks(f(g(h())))`.
func (c *ProductInfoClient) Use(hooks ...Hook) {
	c.hooks.ProductInfo = append(c.hooks.ProductInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productinfo.Intercept(f(g(h())))`.
func (c *ProductInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductInfo = append(c.inters.ProductInfo, interceptors...)
}

// Create returns a builder for creating a ProductInfo entity.
func (c *ProductInfoClient) Create() *ProductInfoCreate {
	mutation := newProductInfoMutation(c.config, OpCreate)
	return &ProductInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductInfo entities.
func (c *ProductInfoClient) CreateBulk(builders ...*ProductInfoCreate) *ProductInfoCreateBulk {
	return &ProductInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductInfoClient) MapCreateBulk(slice any, setFunc func(*ProductInfoCreate, int)) *ProductInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductInfoCreateBulk{err: fmt.Errorf("calling to ProductInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductInfo.
func (c *ProductInfoClient) Update() *ProductInfoUpdate {
	mutation := newProductInfoMutation(c.config, OpUpdate)
	return &ProductInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductInfoClient) UpdateOne(pi *ProductInfo) *ProductInfoUpdateOne {
	mutation := newProductInfoMutation(c.config, OpUpdateOne, withProductInfo(pi))
	return &ProductInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductInfoClient) UpdateOneID(id int32) *ProductInfoUpdateOne {
	mutation := newProductInfoMutation(c.config, OpUpdateOne, withProductInfoID(id))
	return &ProductInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductInfo.
func (c *ProductInfoClient) Delete() *ProductInfoDelete {
	mutation := newProductInfoMutation(c.config, OpDelete)
	return &ProductInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductInfoClient) DeleteOne(pi *ProductInfo) *ProductInfoDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductInfoClient) DeleteOneID(id int32) *ProductInfoDeleteOne {
	builder := c.Delete().Where(productinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductInfoDeleteOne{builder}
}

// Query returns a query builder for ProductInfo.
func (c *ProductInfoClient) Query() *ProductInfoQuery {
	return &ProductInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductInfo entity by its id.
func (c *ProductInfoClient) Get(ctx context.Context, id int32) (*ProductInfo, error) {
	return c.Query().Where(productinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductInfoClient) GetX(ctx context.Context, id int32) *ProductInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderRows queries the order_rows edge of a ProductInfo.
func (c *ProductInfoClient) QueryOrderRows(pi *ProductInfo) *OrderRowQuery {
	query := (&OrderRowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productinfo.Table, productinfo.FieldID, id),
			sqlgraph.To(orderrow.Table, orderrow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productinfo.OrderRowsTable, productinfo.OrderRowsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySizes queries the sizes edge of a ProductInfo.
func (c *ProductInfoClient) QuerySizes(pi *ProductInfo) *SizeQuery {
	query := (&SizeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productinfo.Table, productinfo.FieldID, id),
			sqlgraph.To(size.Table, size.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productinfo.SizesTable, productinfo.SizesColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductInfoClient) Hooks() []Hook {
	return c.hooks.ProductInfo
}

// Interceptors returns the client interceptors.
func (c *ProductInfoClient) Interceptors() []Interceptor {
	return c.inters.ProductInfo
}

func (c *ProductInfoClient) mutate(ctx context.Context, m *ProductInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductInfo mutation op: %q", m.Op())
	}
}

// SizeClient is a client for the Size schema.
type SizeClient struct {
	config
}

// NewSizeClient returns a client for the Size from the given config.
func NewSizeClient(c config) *SizeClient {
	return &SizeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `size.Hooks(f(g(h())))`.
func (c *SizeClient) Use(hooks ...Hook) {
	c.hooks.Size = append(c.hooks.Size, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `size.Intercept(f(g(h())))`.
func (c *SizeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Size = append(c.inters.Size, interceptors...)
}

// Create returns a builder for creating a Size entity.
func (c *SizeClient) Create() *SizeCreate {
	mutation := newSizeMutation(c.config, OpCreate)
	return &SizeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Size entities.
func (c *SizeClient) CreateBulk(builders ...*SizeCreate) *SizeCreateBulk {
	return &SizeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SizeClient) MapCreateBulk(slice any, setFunc func(*SizeCreate, int)) *SizeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SizeCreateBulk{err: fmt.Errorf("calling to SizeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SizeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SizeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Size.
func (c *SizeClient) Update() *SizeUpdate {
	mutation := newSizeMutation(c.config, OpUpdate)
	return &SizeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SizeClient) UpdateOne(s *Size) *SizeUpdateOne {
	mutation := newSizeMutation(c.config, OpUpdateOne, withSize(s))
	return &SizeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SizeClient) UpdateOneID(id int32) *SizeUpdateOne {
	mutation := newSizeMutation(c.config, OpUpdateOne, withSizeID(id))
	return &SizeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Size.
func (c *SizeClient) Delete() *SizeDelete {
	mutation := newSizeMutation(c.config, OpDelete)
	return &SizeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SizeClient) DeleteOne(s *Size) *SizeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SizeClient) DeleteOneID(id int32) *SizeDeleteOne {
	builder := c.Delete().Where(size.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SizeDeleteOne{builder}
}

// Query returns a query builder for Size.
func (c *SizeClient) Query() *SizeQuery {
	return &SizeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSize},
		inters: c.Interceptors(),
	}
}

// Get returns a Size entity by its id.
func (c *SizeClient) Get(ctx context.Context, id int32) (*Size, error) {
	return c.Query().Where(size.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SizeClient) GetX(ctx context.Context, id int32) *Size {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductInfo queries the product_info edge of a Size.
func (c *SizeClient) QueryProductInfo(s *Size) *ProductInfoQuery {
	query := (&ProductInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(size.Table, size.FieldID, id),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, size.ProductInfoTable, size.ProductInfoColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SizeClient) Hooks() []Hook {
	return c.hooks.Size
}

// Interceptors returns the client interceptors.
func (c *SizeClient) Interceptors() []Interceptor {
	return c.inters.Size
}

func (c *SizeClient) mutate(ctx context.Context, m *SizeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SizeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SizeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SizeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SizeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Size mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHistories queries the order_histories edge of a User.
func (c *UserClient) QueryOrderHistories(u *User) *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OrderHistoriesTable, user.OrderHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserAddress queries the user_address edge of a User.
func (c *UserClient) QueryUserAddress(u *User) *UserAddressQuery {
	query := (&UserAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useraddress.Table, useraddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserAddressTable, user.UserAddressColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserAddressClient is a client for the UserAddress schema.
type UserAddressClient struct {
	config
}

// NewUserAddressClient returns a client for the UserAddress from the given config.
func NewUserAddressClient(c config) *UserAddressClient {
	return &UserAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useraddress.Hooks(f(g(h())))`.
func (c *UserAddressClient) Use(hooks ...Hook) {
	c.hooks.UserAddress = append(c.hooks.UserAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useraddress.Intercept(f(g(h())))`.
func (c *UserAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserAddress = append(c.inters.UserAddress, interceptors...)
}

// Create returns a builder for creating a UserAddress entity.
func (c *UserAddressClient) Create() *UserAddressCreate {
	mutation := newUserAddressMutation(c.config, OpCreate)
	return &UserAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAddress entities.
func (c *UserAddressClient) CreateBulk(builders ...*UserAddressCreate) *UserAddressCreateBulk {
	return &UserAddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserAddressClient) MapCreateBulk(slice any, setFunc func(*UserAddressCreate, int)) *UserAddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserAddressCreateBulk{err: fmt.Errorf("calling to UserAddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserAddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAddress.
func (c *UserAddressClient) Update() *UserAddressUpdate {
	mutation := newUserAddressMutation(c.config, OpUpdate)
	return &UserAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAddressClient) UpdateOne(ua *UserAddress) *UserAddressUpdateOne {
	mutation := newUserAddressMutation(c.config, OpUpdateOne, withUserAddress(ua))
	return &UserAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAddressClient) UpdateOneID(id string) *UserAddressUpdateOne {
	mutation := newUserAddressMutation(c.config, OpUpdateOne, withUserAddressID(id))
	return &UserAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAddress.
func (c *UserAddressClient) Delete() *UserAddressDelete {
	mutation := newUserAddressMutation(c.config, OpDelete)
	return &UserAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserAddressClient) DeleteOne(ua *UserAddress) *UserAddressDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserAddressClient) DeleteOneID(id string) *UserAddressDeleteOne {
	builder := c.Delete().Where(useraddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAddressDeleteOne{builder}
}

// Query returns a query builder for UserAddress.
func (c *UserAddressClient) Query() *UserAddressQuery {
	return &UserAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a UserAddress entity by its id.
func (c *UserAddressClient) Get(ctx context.Context, id string) (*UserAddress, error) {
	return c.Query().Where(useraddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAddressClient) GetX(ctx context.Context, id string) *UserAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHistories queries the order_histories edge of a UserAddress.
func (c *UserAddressClient) QueryOrderHistories(ua *UserAddress) *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraddress.Table, useraddress.FieldID, id),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useraddress.OrderHistoriesTable, useraddress.OrderHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserAddress.
func (c *UserAddressClient) QueryUser(ua *UserAddress) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraddress.Table, useraddress.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraddress.UserTable, useraddress.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserAddressClient) Hooks() []Hook {
	return c.hooks.UserAddress
}

// Interceptors returns the client interceptors.
func (c *UserAddressClient) Interceptors() []Interceptor {
	return c.inters.UserAddress
}

func (c *UserAddressClient) mutate(ctx context.Context, m *UserAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserAddress mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		OrderHistory, OrderRow, ProductInfo, Size, User, UserAddress []ent.Hook
	}
	inters struct {
		OrderHistory, OrderRow, ProductInfo, Size, User, UserAddress []ent.Interceptor
	}
)
