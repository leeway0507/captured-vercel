// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderrow"
	"product-server/ent/predicate"
	"product-server/ent/productinfo"
	"product-server/ent/size"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductInfoUpdate is the builder for updating ProductInfo entities.
type ProductInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ProductInfoMutation
}

// Where appends a list predicates to the ProductInfoUpdate builder.
func (piu *ProductInfoUpdate) Where(ps ...predicate.ProductInfo) *ProductInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetBrand sets the "brand" field.
func (piu *ProductInfoUpdate) SetBrand(s string) *ProductInfoUpdate {
	piu.mutation.SetBrand(s)
	return piu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableBrand(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetBrand(*s)
	}
	return piu
}

// ClearBrand clears the value of the "brand" field.
func (piu *ProductInfoUpdate) ClearBrand() *ProductInfoUpdate {
	piu.mutation.ClearBrand()
	return piu
}

// SetProductName sets the "product_name" field.
func (piu *ProductInfoUpdate) SetProductName(s string) *ProductInfoUpdate {
	piu.mutation.SetProductName(s)
	return piu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableProductName(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetProductName(*s)
	}
	return piu
}

// ClearProductName clears the value of the "product_name" field.
func (piu *ProductInfoUpdate) ClearProductName() *ProductInfoUpdate {
	piu.mutation.ClearProductName()
	return piu
}

// SetProductID sets the "product_id" field.
func (piu *ProductInfoUpdate) SetProductID(s string) *ProductInfoUpdate {
	piu.mutation.SetProductID(s)
	return piu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableProductID(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetProductID(*s)
	}
	return piu
}

// ClearProductID clears the value of the "product_id" field.
func (piu *ProductInfoUpdate) ClearProductID() *ProductInfoUpdate {
	piu.mutation.ClearProductID()
	return piu
}

// SetShippingFee sets the "shipping_fee" field.
func (piu *ProductInfoUpdate) SetShippingFee(i int32) *ProductInfoUpdate {
	piu.mutation.ResetShippingFee()
	piu.mutation.SetShippingFee(i)
	return piu
}

// SetNillableShippingFee sets the "shipping_fee" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableShippingFee(i *int32) *ProductInfoUpdate {
	if i != nil {
		piu.SetShippingFee(*i)
	}
	return piu
}

// AddShippingFee adds i to the "shipping_fee" field.
func (piu *ProductInfoUpdate) AddShippingFee(i int32) *ProductInfoUpdate {
	piu.mutation.AddShippingFee(i)
	return piu
}

// ClearShippingFee clears the value of the "shipping_fee" field.
func (piu *ProductInfoUpdate) ClearShippingFee() *ProductInfoUpdate {
	piu.mutation.ClearShippingFee()
	return piu
}

// SetPrice sets the "price" field.
func (piu *ProductInfoUpdate) SetPrice(i int32) *ProductInfoUpdate {
	piu.mutation.ResetPrice()
	piu.mutation.SetPrice(i)
	return piu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillablePrice(i *int32) *ProductInfoUpdate {
	if i != nil {
		piu.SetPrice(*i)
	}
	return piu
}

// AddPrice adds i to the "price" field.
func (piu *ProductInfoUpdate) AddPrice(i int32) *ProductInfoUpdate {
	piu.mutation.AddPrice(i)
	return piu
}

// ClearPrice clears the value of the "price" field.
func (piu *ProductInfoUpdate) ClearPrice() *ProductInfoUpdate {
	piu.mutation.ClearPrice()
	return piu
}

// SetIntl sets the "intl" field.
func (piu *ProductInfoUpdate) SetIntl(b bool) *ProductInfoUpdate {
	piu.mutation.SetIntl(b)
	return piu
}

// SetNillableIntl sets the "intl" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableIntl(b *bool) *ProductInfoUpdate {
	if b != nil {
		piu.SetIntl(*b)
	}
	return piu
}

// ClearIntl clears the value of the "intl" field.
func (piu *ProductInfoUpdate) ClearIntl() *ProductInfoUpdate {
	piu.mutation.ClearIntl()
	return piu
}

// SetSearchInfo sets the "search_info" field.
func (piu *ProductInfoUpdate) SetSearchInfo(s string) *ProductInfoUpdate {
	piu.mutation.SetSearchInfo(s)
	return piu
}

// SetNillableSearchInfo sets the "search_info" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableSearchInfo(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetSearchInfo(*s)
	}
	return piu
}

// ClearSearchInfo clears the value of the "search_info" field.
func (piu *ProductInfoUpdate) ClearSearchInfo() *ProductInfoUpdate {
	piu.mutation.ClearSearchInfo()
	return piu
}

// SetColor sets the "color" field.
func (piu *ProductInfoUpdate) SetColor(s string) *ProductInfoUpdate {
	piu.mutation.SetColor(s)
	return piu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableColor(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetColor(*s)
	}
	return piu
}

// ClearColor clears the value of the "color" field.
func (piu *ProductInfoUpdate) ClearColor() *ProductInfoUpdate {
	piu.mutation.ClearColor()
	return piu
}

// SetCategory sets the "category" field.
func (piu *ProductInfoUpdate) SetCategory(s string) *ProductInfoUpdate {
	piu.mutation.SetCategory(s)
	return piu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableCategory(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetCategory(*s)
	}
	return piu
}

// ClearCategory clears the value of the "category" field.
func (piu *ProductInfoUpdate) ClearCategory() *ProductInfoUpdate {
	piu.mutation.ClearCategory()
	return piu
}

// SetCategorySpec sets the "category_spec" field.
func (piu *ProductInfoUpdate) SetCategorySpec(s string) *ProductInfoUpdate {
	piu.mutation.SetCategorySpec(s)
	return piu
}

// SetNillableCategorySpec sets the "category_spec" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableCategorySpec(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetCategorySpec(*s)
	}
	return piu
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (piu *ProductInfoUpdate) ClearCategorySpec() *ProductInfoUpdate {
	piu.mutation.ClearCategorySpec()
	return piu
}

// SetImgType sets the "img_type" field.
func (piu *ProductInfoUpdate) SetImgType(s string) *ProductInfoUpdate {
	piu.mutation.SetImgType(s)
	return piu
}

// SetNillableImgType sets the "img_type" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableImgType(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetImgType(*s)
	}
	return piu
}

// ClearImgType clears the value of the "img_type" field.
func (piu *ProductInfoUpdate) ClearImgType() *ProductInfoUpdate {
	piu.mutation.ClearImgType()
	return piu
}

// SetPriceDescCursor sets the "price_desc_cursor" field.
func (piu *ProductInfoUpdate) SetPriceDescCursor(s string) *ProductInfoUpdate {
	piu.mutation.SetPriceDescCursor(s)
	return piu
}

// SetNillablePriceDescCursor sets the "price_desc_cursor" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillablePriceDescCursor(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetPriceDescCursor(*s)
	}
	return piu
}

// ClearPriceDescCursor clears the value of the "price_desc_cursor" field.
func (piu *ProductInfoUpdate) ClearPriceDescCursor() *ProductInfoUpdate {
	piu.mutation.ClearPriceDescCursor()
	return piu
}

// SetPriceAscCursor sets the "price_asc_cursor" field.
func (piu *ProductInfoUpdate) SetPriceAscCursor(s string) *ProductInfoUpdate {
	piu.mutation.SetPriceAscCursor(s)
	return piu
}

// SetNillablePriceAscCursor sets the "price_asc_cursor" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillablePriceAscCursor(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetPriceAscCursor(*s)
	}
	return piu
}

// ClearPriceAscCursor clears the value of the "price_asc_cursor" field.
func (piu *ProductInfoUpdate) ClearPriceAscCursor() *ProductInfoUpdate {
	piu.mutation.ClearPriceAscCursor()
	return piu
}

// SetDeploy sets the "deploy" field.
func (piu *ProductInfoUpdate) SetDeploy(i int32) *ProductInfoUpdate {
	piu.mutation.ResetDeploy()
	piu.mutation.SetDeploy(i)
	return piu
}

// SetNillableDeploy sets the "deploy" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableDeploy(i *int32) *ProductInfoUpdate {
	if i != nil {
		piu.SetDeploy(*i)
	}
	return piu
}

// AddDeploy adds i to the "deploy" field.
func (piu *ProductInfoUpdate) AddDeploy(i int32) *ProductInfoUpdate {
	piu.mutation.AddDeploy(i)
	return piu
}

// ClearDeploy clears the value of the "deploy" field.
func (piu *ProductInfoUpdate) ClearDeploy() *ProductInfoUpdate {
	piu.mutation.ClearDeploy()
	return piu
}

// SetKorProductName sets the "kor_product_name" field.
func (piu *ProductInfoUpdate) SetKorProductName(s string) *ProductInfoUpdate {
	piu.mutation.SetKorProductName(s)
	return piu
}

// SetNillableKorProductName sets the "kor_product_name" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableKorProductName(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetKorProductName(*s)
	}
	return piu
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (piu *ProductInfoUpdate) ClearKorProductName() *ProductInfoUpdate {
	piu.mutation.ClearKorProductName()
	return piu
}

// SetKorBrand sets the "kor_brand" field.
func (piu *ProductInfoUpdate) SetKorBrand(s string) *ProductInfoUpdate {
	piu.mutation.SetKorBrand(s)
	return piu
}

// SetNillableKorBrand sets the "kor_brand" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableKorBrand(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetKorBrand(*s)
	}
	return piu
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (piu *ProductInfoUpdate) ClearKorBrand() *ProductInfoUpdate {
	piu.mutation.ClearKorBrand()
	return piu
}

// AddOrderRowIDs adds the "order_rows" edge to the OrderRow entity by IDs.
func (piu *ProductInfoUpdate) AddOrderRowIDs(ids ...int32) *ProductInfoUpdate {
	piu.mutation.AddOrderRowIDs(ids...)
	return piu
}

// AddOrderRows adds the "order_rows" edges to the OrderRow entity.
func (piu *ProductInfoUpdate) AddOrderRows(o ...*OrderRow) *ProductInfoUpdate {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piu.AddOrderRowIDs(ids...)
}

// AddSizeIDs adds the "sizes" edge to the Size entity by IDs.
func (piu *ProductInfoUpdate) AddSizeIDs(ids ...int32) *ProductInfoUpdate {
	piu.mutation.AddSizeIDs(ids...)
	return piu
}

// AddSizes adds the "sizes" edges to the Size entity.
func (piu *ProductInfoUpdate) AddSizes(s ...*Size) *ProductInfoUpdate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piu.AddSizeIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (piu *ProductInfoUpdate) Mutation() *ProductInfoMutation {
	return piu.mutation
}

// ClearOrderRows clears all "order_rows" edges to the OrderRow entity.
func (piu *ProductInfoUpdate) ClearOrderRows() *ProductInfoUpdate {
	piu.mutation.ClearOrderRows()
	return piu
}

// RemoveOrderRowIDs removes the "order_rows" edge to OrderRow entities by IDs.
func (piu *ProductInfoUpdate) RemoveOrderRowIDs(ids ...int32) *ProductInfoUpdate {
	piu.mutation.RemoveOrderRowIDs(ids...)
	return piu
}

// RemoveOrderRows removes "order_rows" edges to OrderRow entities.
func (piu *ProductInfoUpdate) RemoveOrderRows(o ...*OrderRow) *ProductInfoUpdate {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piu.RemoveOrderRowIDs(ids...)
}

// ClearSizes clears all "sizes" edges to the Size entity.
func (piu *ProductInfoUpdate) ClearSizes() *ProductInfoUpdate {
	piu.mutation.ClearSizes()
	return piu
}

// RemoveSizeIDs removes the "sizes" edge to Size entities by IDs.
func (piu *ProductInfoUpdate) RemoveSizeIDs(ids ...int32) *ProductInfoUpdate {
	piu.mutation.RemoveSizeIDs(ids...)
	return piu
}

// RemoveSizes removes "sizes" edges to Size entities.
func (piu *ProductInfoUpdate) RemoveSizes(s ...*Size) *ProductInfoUpdate {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piu.RemoveSizeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *ProductInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productinfo.Table, productinfo.Columns, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Brand(); ok {
		_spec.SetField(productinfo.FieldBrand, field.TypeString, value)
	}
	if piu.mutation.BrandCleared() {
		_spec.ClearField(productinfo.FieldBrand, field.TypeString)
	}
	if value, ok := piu.mutation.ProductName(); ok {
		_spec.SetField(productinfo.FieldProductName, field.TypeString, value)
	}
	if piu.mutation.ProductNameCleared() {
		_spec.ClearField(productinfo.FieldProductName, field.TypeString)
	}
	if value, ok := piu.mutation.ProductID(); ok {
		_spec.SetField(productinfo.FieldProductID, field.TypeString, value)
	}
	if piu.mutation.ProductIDCleared() {
		_spec.ClearField(productinfo.FieldProductID, field.TypeString)
	}
	if value, ok := piu.mutation.ShippingFee(); ok {
		_spec.SetField(productinfo.FieldShippingFee, field.TypeInt32, value)
	}
	if value, ok := piu.mutation.AddedShippingFee(); ok {
		_spec.AddField(productinfo.FieldShippingFee, field.TypeInt32, value)
	}
	if piu.mutation.ShippingFeeCleared() {
		_spec.ClearField(productinfo.FieldShippingFee, field.TypeInt32)
	}
	if value, ok := piu.mutation.Price(); ok {
		_spec.SetField(productinfo.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := piu.mutation.AddedPrice(); ok {
		_spec.AddField(productinfo.FieldPrice, field.TypeInt32, value)
	}
	if piu.mutation.PriceCleared() {
		_spec.ClearField(productinfo.FieldPrice, field.TypeInt32)
	}
	if value, ok := piu.mutation.Intl(); ok {
		_spec.SetField(productinfo.FieldIntl, field.TypeBool, value)
	}
	if piu.mutation.IntlCleared() {
		_spec.ClearField(productinfo.FieldIntl, field.TypeBool)
	}
	if value, ok := piu.mutation.SearchInfo(); ok {
		_spec.SetField(productinfo.FieldSearchInfo, field.TypeString, value)
	}
	if piu.mutation.SearchInfoCleared() {
		_spec.ClearField(productinfo.FieldSearchInfo, field.TypeString)
	}
	if value, ok := piu.mutation.Color(); ok {
		_spec.SetField(productinfo.FieldColor, field.TypeString, value)
	}
	if piu.mutation.ColorCleared() {
		_spec.ClearField(productinfo.FieldColor, field.TypeString)
	}
	if value, ok := piu.mutation.Category(); ok {
		_spec.SetField(productinfo.FieldCategory, field.TypeString, value)
	}
	if piu.mutation.CategoryCleared() {
		_spec.ClearField(productinfo.FieldCategory, field.TypeString)
	}
	if value, ok := piu.mutation.CategorySpec(); ok {
		_spec.SetField(productinfo.FieldCategorySpec, field.TypeString, value)
	}
	if piu.mutation.CategorySpecCleared() {
		_spec.ClearField(productinfo.FieldCategorySpec, field.TypeString)
	}
	if value, ok := piu.mutation.ImgType(); ok {
		_spec.SetField(productinfo.FieldImgType, field.TypeString, value)
	}
	if piu.mutation.ImgTypeCleared() {
		_spec.ClearField(productinfo.FieldImgType, field.TypeString)
	}
	if value, ok := piu.mutation.PriceDescCursor(); ok {
		_spec.SetField(productinfo.FieldPriceDescCursor, field.TypeString, value)
	}
	if piu.mutation.PriceDescCursorCleared() {
		_spec.ClearField(productinfo.FieldPriceDescCursor, field.TypeString)
	}
	if value, ok := piu.mutation.PriceAscCursor(); ok {
		_spec.SetField(productinfo.FieldPriceAscCursor, field.TypeString, value)
	}
	if piu.mutation.PriceAscCursorCleared() {
		_spec.ClearField(productinfo.FieldPriceAscCursor, field.TypeString)
	}
	if value, ok := piu.mutation.Deploy(); ok {
		_spec.SetField(productinfo.FieldDeploy, field.TypeInt32, value)
	}
	if value, ok := piu.mutation.AddedDeploy(); ok {
		_spec.AddField(productinfo.FieldDeploy, field.TypeInt32, value)
	}
	if piu.mutation.DeployCleared() {
		_spec.ClearField(productinfo.FieldDeploy, field.TypeInt32)
	}
	if value, ok := piu.mutation.KorProductName(); ok {
		_spec.SetField(productinfo.FieldKorProductName, field.TypeString, value)
	}
	if piu.mutation.KorProductNameCleared() {
		_spec.ClearField(productinfo.FieldKorProductName, field.TypeString)
	}
	if value, ok := piu.mutation.KorBrand(); ok {
		_spec.SetField(productinfo.FieldKorBrand, field.TypeString, value)
	}
	if piu.mutation.KorBrandCleared() {
		_spec.ClearField(productinfo.FieldKorBrand, field.TypeString)
	}
	if piu.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedOrderRowsIDs(); len(nodes) > 0 && !piu.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.OrderRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.SizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedSizesIDs(); len(nodes) > 0 && !piu.mutation.SizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.SizesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductInfoUpdateOne is the builder for updating a single ProductInfo entity.
type ProductInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductInfoMutation
}

// SetBrand sets the "brand" field.
func (piuo *ProductInfoUpdateOne) SetBrand(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetBrand(s)
	return piuo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableBrand(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetBrand(*s)
	}
	return piuo
}

// ClearBrand clears the value of the "brand" field.
func (piuo *ProductInfoUpdateOne) ClearBrand() *ProductInfoUpdateOne {
	piuo.mutation.ClearBrand()
	return piuo
}

// SetProductName sets the "product_name" field.
func (piuo *ProductInfoUpdateOne) SetProductName(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetProductName(s)
	return piuo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableProductName(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetProductName(*s)
	}
	return piuo
}

// ClearProductName clears the value of the "product_name" field.
func (piuo *ProductInfoUpdateOne) ClearProductName() *ProductInfoUpdateOne {
	piuo.mutation.ClearProductName()
	return piuo
}

// SetProductID sets the "product_id" field.
func (piuo *ProductInfoUpdateOne) SetProductID(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetProductID(s)
	return piuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableProductID(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetProductID(*s)
	}
	return piuo
}

// ClearProductID clears the value of the "product_id" field.
func (piuo *ProductInfoUpdateOne) ClearProductID() *ProductInfoUpdateOne {
	piuo.mutation.ClearProductID()
	return piuo
}

// SetShippingFee sets the "shipping_fee" field.
func (piuo *ProductInfoUpdateOne) SetShippingFee(i int32) *ProductInfoUpdateOne {
	piuo.mutation.ResetShippingFee()
	piuo.mutation.SetShippingFee(i)
	return piuo
}

// SetNillableShippingFee sets the "shipping_fee" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableShippingFee(i *int32) *ProductInfoUpdateOne {
	if i != nil {
		piuo.SetShippingFee(*i)
	}
	return piuo
}

// AddShippingFee adds i to the "shipping_fee" field.
func (piuo *ProductInfoUpdateOne) AddShippingFee(i int32) *ProductInfoUpdateOne {
	piuo.mutation.AddShippingFee(i)
	return piuo
}

// ClearShippingFee clears the value of the "shipping_fee" field.
func (piuo *ProductInfoUpdateOne) ClearShippingFee() *ProductInfoUpdateOne {
	piuo.mutation.ClearShippingFee()
	return piuo
}

// SetPrice sets the "price" field.
func (piuo *ProductInfoUpdateOne) SetPrice(i int32) *ProductInfoUpdateOne {
	piuo.mutation.ResetPrice()
	piuo.mutation.SetPrice(i)
	return piuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillablePrice(i *int32) *ProductInfoUpdateOne {
	if i != nil {
		piuo.SetPrice(*i)
	}
	return piuo
}

// AddPrice adds i to the "price" field.
func (piuo *ProductInfoUpdateOne) AddPrice(i int32) *ProductInfoUpdateOne {
	piuo.mutation.AddPrice(i)
	return piuo
}

// ClearPrice clears the value of the "price" field.
func (piuo *ProductInfoUpdateOne) ClearPrice() *ProductInfoUpdateOne {
	piuo.mutation.ClearPrice()
	return piuo
}

// SetIntl sets the "intl" field.
func (piuo *ProductInfoUpdateOne) SetIntl(b bool) *ProductInfoUpdateOne {
	piuo.mutation.SetIntl(b)
	return piuo
}

// SetNillableIntl sets the "intl" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableIntl(b *bool) *ProductInfoUpdateOne {
	if b != nil {
		piuo.SetIntl(*b)
	}
	return piuo
}

// ClearIntl clears the value of the "intl" field.
func (piuo *ProductInfoUpdateOne) ClearIntl() *ProductInfoUpdateOne {
	piuo.mutation.ClearIntl()
	return piuo
}

// SetSearchInfo sets the "search_info" field.
func (piuo *ProductInfoUpdateOne) SetSearchInfo(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetSearchInfo(s)
	return piuo
}

// SetNillableSearchInfo sets the "search_info" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableSearchInfo(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetSearchInfo(*s)
	}
	return piuo
}

// ClearSearchInfo clears the value of the "search_info" field.
func (piuo *ProductInfoUpdateOne) ClearSearchInfo() *ProductInfoUpdateOne {
	piuo.mutation.ClearSearchInfo()
	return piuo
}

// SetColor sets the "color" field.
func (piuo *ProductInfoUpdateOne) SetColor(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetColor(s)
	return piuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableColor(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetColor(*s)
	}
	return piuo
}

// ClearColor clears the value of the "color" field.
func (piuo *ProductInfoUpdateOne) ClearColor() *ProductInfoUpdateOne {
	piuo.mutation.ClearColor()
	return piuo
}

// SetCategory sets the "category" field.
func (piuo *ProductInfoUpdateOne) SetCategory(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetCategory(s)
	return piuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableCategory(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetCategory(*s)
	}
	return piuo
}

// ClearCategory clears the value of the "category" field.
func (piuo *ProductInfoUpdateOne) ClearCategory() *ProductInfoUpdateOne {
	piuo.mutation.ClearCategory()
	return piuo
}

// SetCategorySpec sets the "category_spec" field.
func (piuo *ProductInfoUpdateOne) SetCategorySpec(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetCategorySpec(s)
	return piuo
}

// SetNillableCategorySpec sets the "category_spec" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableCategorySpec(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetCategorySpec(*s)
	}
	return piuo
}

// ClearCategorySpec clears the value of the "category_spec" field.
func (piuo *ProductInfoUpdateOne) ClearCategorySpec() *ProductInfoUpdateOne {
	piuo.mutation.ClearCategorySpec()
	return piuo
}

// SetImgType sets the "img_type" field.
func (piuo *ProductInfoUpdateOne) SetImgType(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetImgType(s)
	return piuo
}

// SetNillableImgType sets the "img_type" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableImgType(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetImgType(*s)
	}
	return piuo
}

// ClearImgType clears the value of the "img_type" field.
func (piuo *ProductInfoUpdateOne) ClearImgType() *ProductInfoUpdateOne {
	piuo.mutation.ClearImgType()
	return piuo
}

// SetPriceDescCursor sets the "price_desc_cursor" field.
func (piuo *ProductInfoUpdateOne) SetPriceDescCursor(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetPriceDescCursor(s)
	return piuo
}

// SetNillablePriceDescCursor sets the "price_desc_cursor" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillablePriceDescCursor(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetPriceDescCursor(*s)
	}
	return piuo
}

// ClearPriceDescCursor clears the value of the "price_desc_cursor" field.
func (piuo *ProductInfoUpdateOne) ClearPriceDescCursor() *ProductInfoUpdateOne {
	piuo.mutation.ClearPriceDescCursor()
	return piuo
}

// SetPriceAscCursor sets the "price_asc_cursor" field.
func (piuo *ProductInfoUpdateOne) SetPriceAscCursor(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetPriceAscCursor(s)
	return piuo
}

// SetNillablePriceAscCursor sets the "price_asc_cursor" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillablePriceAscCursor(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetPriceAscCursor(*s)
	}
	return piuo
}

// ClearPriceAscCursor clears the value of the "price_asc_cursor" field.
func (piuo *ProductInfoUpdateOne) ClearPriceAscCursor() *ProductInfoUpdateOne {
	piuo.mutation.ClearPriceAscCursor()
	return piuo
}

// SetDeploy sets the "deploy" field.
func (piuo *ProductInfoUpdateOne) SetDeploy(i int32) *ProductInfoUpdateOne {
	piuo.mutation.ResetDeploy()
	piuo.mutation.SetDeploy(i)
	return piuo
}

// SetNillableDeploy sets the "deploy" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableDeploy(i *int32) *ProductInfoUpdateOne {
	if i != nil {
		piuo.SetDeploy(*i)
	}
	return piuo
}

// AddDeploy adds i to the "deploy" field.
func (piuo *ProductInfoUpdateOne) AddDeploy(i int32) *ProductInfoUpdateOne {
	piuo.mutation.AddDeploy(i)
	return piuo
}

// ClearDeploy clears the value of the "deploy" field.
func (piuo *ProductInfoUpdateOne) ClearDeploy() *ProductInfoUpdateOne {
	piuo.mutation.ClearDeploy()
	return piuo
}

// SetKorProductName sets the "kor_product_name" field.
func (piuo *ProductInfoUpdateOne) SetKorProductName(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetKorProductName(s)
	return piuo
}

// SetNillableKorProductName sets the "kor_product_name" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableKorProductName(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetKorProductName(*s)
	}
	return piuo
}

// ClearKorProductName clears the value of the "kor_product_name" field.
func (piuo *ProductInfoUpdateOne) ClearKorProductName() *ProductInfoUpdateOne {
	piuo.mutation.ClearKorProductName()
	return piuo
}

// SetKorBrand sets the "kor_brand" field.
func (piuo *ProductInfoUpdateOne) SetKorBrand(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetKorBrand(s)
	return piuo
}

// SetNillableKorBrand sets the "kor_brand" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableKorBrand(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetKorBrand(*s)
	}
	return piuo
}

// ClearKorBrand clears the value of the "kor_brand" field.
func (piuo *ProductInfoUpdateOne) ClearKorBrand() *ProductInfoUpdateOne {
	piuo.mutation.ClearKorBrand()
	return piuo
}

// AddOrderRowIDs adds the "order_rows" edge to the OrderRow entity by IDs.
func (piuo *ProductInfoUpdateOne) AddOrderRowIDs(ids ...int32) *ProductInfoUpdateOne {
	piuo.mutation.AddOrderRowIDs(ids...)
	return piuo
}

// AddOrderRows adds the "order_rows" edges to the OrderRow entity.
func (piuo *ProductInfoUpdateOne) AddOrderRows(o ...*OrderRow) *ProductInfoUpdateOne {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piuo.AddOrderRowIDs(ids...)
}

// AddSizeIDs adds the "sizes" edge to the Size entity by IDs.
func (piuo *ProductInfoUpdateOne) AddSizeIDs(ids ...int32) *ProductInfoUpdateOne {
	piuo.mutation.AddSizeIDs(ids...)
	return piuo
}

// AddSizes adds the "sizes" edges to the Size entity.
func (piuo *ProductInfoUpdateOne) AddSizes(s ...*Size) *ProductInfoUpdateOne {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piuo.AddSizeIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (piuo *ProductInfoUpdateOne) Mutation() *ProductInfoMutation {
	return piuo.mutation
}

// ClearOrderRows clears all "order_rows" edges to the OrderRow entity.
func (piuo *ProductInfoUpdateOne) ClearOrderRows() *ProductInfoUpdateOne {
	piuo.mutation.ClearOrderRows()
	return piuo
}

// RemoveOrderRowIDs removes the "order_rows" edge to OrderRow entities by IDs.
func (piuo *ProductInfoUpdateOne) RemoveOrderRowIDs(ids ...int32) *ProductInfoUpdateOne {
	piuo.mutation.RemoveOrderRowIDs(ids...)
	return piuo
}

// RemoveOrderRows removes "order_rows" edges to OrderRow entities.
func (piuo *ProductInfoUpdateOne) RemoveOrderRows(o ...*OrderRow) *ProductInfoUpdateOne {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piuo.RemoveOrderRowIDs(ids...)
}

// ClearSizes clears all "sizes" edges to the Size entity.
func (piuo *ProductInfoUpdateOne) ClearSizes() *ProductInfoUpdateOne {
	piuo.mutation.ClearSizes()
	return piuo
}

// RemoveSizeIDs removes the "sizes" edge to Size entities by IDs.
func (piuo *ProductInfoUpdateOne) RemoveSizeIDs(ids ...int32) *ProductInfoUpdateOne {
	piuo.mutation.RemoveSizeIDs(ids...)
	return piuo
}

// RemoveSizes removes "sizes" edges to Size entities.
func (piuo *ProductInfoUpdateOne) RemoveSizes(s ...*Size) *ProductInfoUpdateOne {
	ids := make([]int32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piuo.RemoveSizeIDs(ids...)
}

// Where appends a list predicates to the ProductInfoUpdate builder.
func (piuo *ProductInfoUpdateOne) Where(ps ...predicate.ProductInfo) *ProductInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductInfoUpdateOne) Select(field string, fields ...string) *ProductInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductInfo entity.
func (piuo *ProductInfoUpdateOne) Save(ctx context.Context) (*ProductInfo, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductInfoUpdateOne) SaveX(ctx context.Context) *ProductInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *ProductInfoUpdateOne) sqlSave(ctx context.Context) (_node *ProductInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(productinfo.Table, productinfo.Columns, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt32))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productinfo.FieldID)
		for _, f := range fields {
			if !productinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Brand(); ok {
		_spec.SetField(productinfo.FieldBrand, field.TypeString, value)
	}
	if piuo.mutation.BrandCleared() {
		_spec.ClearField(productinfo.FieldBrand, field.TypeString)
	}
	if value, ok := piuo.mutation.ProductName(); ok {
		_spec.SetField(productinfo.FieldProductName, field.TypeString, value)
	}
	if piuo.mutation.ProductNameCleared() {
		_spec.ClearField(productinfo.FieldProductName, field.TypeString)
	}
	if value, ok := piuo.mutation.ProductID(); ok {
		_spec.SetField(productinfo.FieldProductID, field.TypeString, value)
	}
	if piuo.mutation.ProductIDCleared() {
		_spec.ClearField(productinfo.FieldProductID, field.TypeString)
	}
	if value, ok := piuo.mutation.ShippingFee(); ok {
		_spec.SetField(productinfo.FieldShippingFee, field.TypeInt32, value)
	}
	if value, ok := piuo.mutation.AddedShippingFee(); ok {
		_spec.AddField(productinfo.FieldShippingFee, field.TypeInt32, value)
	}
	if piuo.mutation.ShippingFeeCleared() {
		_spec.ClearField(productinfo.FieldShippingFee, field.TypeInt32)
	}
	if value, ok := piuo.mutation.Price(); ok {
		_spec.SetField(productinfo.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := piuo.mutation.AddedPrice(); ok {
		_spec.AddField(productinfo.FieldPrice, field.TypeInt32, value)
	}
	if piuo.mutation.PriceCleared() {
		_spec.ClearField(productinfo.FieldPrice, field.TypeInt32)
	}
	if value, ok := piuo.mutation.Intl(); ok {
		_spec.SetField(productinfo.FieldIntl, field.TypeBool, value)
	}
	if piuo.mutation.IntlCleared() {
		_spec.ClearField(productinfo.FieldIntl, field.TypeBool)
	}
	if value, ok := piuo.mutation.SearchInfo(); ok {
		_spec.SetField(productinfo.FieldSearchInfo, field.TypeString, value)
	}
	if piuo.mutation.SearchInfoCleared() {
		_spec.ClearField(productinfo.FieldSearchInfo, field.TypeString)
	}
	if value, ok := piuo.mutation.Color(); ok {
		_spec.SetField(productinfo.FieldColor, field.TypeString, value)
	}
	if piuo.mutation.ColorCleared() {
		_spec.ClearField(productinfo.FieldColor, field.TypeString)
	}
	if value, ok := piuo.mutation.Category(); ok {
		_spec.SetField(productinfo.FieldCategory, field.TypeString, value)
	}
	if piuo.mutation.CategoryCleared() {
		_spec.ClearField(productinfo.FieldCategory, field.TypeString)
	}
	if value, ok := piuo.mutation.CategorySpec(); ok {
		_spec.SetField(productinfo.FieldCategorySpec, field.TypeString, value)
	}
	if piuo.mutation.CategorySpecCleared() {
		_spec.ClearField(productinfo.FieldCategorySpec, field.TypeString)
	}
	if value, ok := piuo.mutation.ImgType(); ok {
		_spec.SetField(productinfo.FieldImgType, field.TypeString, value)
	}
	if piuo.mutation.ImgTypeCleared() {
		_spec.ClearField(productinfo.FieldImgType, field.TypeString)
	}
	if value, ok := piuo.mutation.PriceDescCursor(); ok {
		_spec.SetField(productinfo.FieldPriceDescCursor, field.TypeString, value)
	}
	if piuo.mutation.PriceDescCursorCleared() {
		_spec.ClearField(productinfo.FieldPriceDescCursor, field.TypeString)
	}
	if value, ok := piuo.mutation.PriceAscCursor(); ok {
		_spec.SetField(productinfo.FieldPriceAscCursor, field.TypeString, value)
	}
	if piuo.mutation.PriceAscCursorCleared() {
		_spec.ClearField(productinfo.FieldPriceAscCursor, field.TypeString)
	}
	if value, ok := piuo.mutation.Deploy(); ok {
		_spec.SetField(productinfo.FieldDeploy, field.TypeInt32, value)
	}
	if value, ok := piuo.mutation.AddedDeploy(); ok {
		_spec.AddField(productinfo.FieldDeploy, field.TypeInt32, value)
	}
	if piuo.mutation.DeployCleared() {
		_spec.ClearField(productinfo.FieldDeploy, field.TypeInt32)
	}
	if value, ok := piuo.mutation.KorProductName(); ok {
		_spec.SetField(productinfo.FieldKorProductName, field.TypeString, value)
	}
	if piuo.mutation.KorProductNameCleared() {
		_spec.ClearField(productinfo.FieldKorProductName, field.TypeString)
	}
	if value, ok := piuo.mutation.KorBrand(); ok {
		_spec.SetField(productinfo.FieldKorBrand, field.TypeString, value)
	}
	if piuo.mutation.KorBrandCleared() {
		_spec.ClearField(productinfo.FieldKorBrand, field.TypeString)
	}
	if piuo.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedOrderRowsIDs(); len(nodes) > 0 && !piuo.mutation.OrderRowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.OrderRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.OrderRowsTable,
			Columns: []string{productinfo.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.SizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedSizesIDs(); len(nodes) > 0 && !piuo.mutation.SizesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.SizesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.SizesTable,
			Columns: []string{productinfo.SizesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
