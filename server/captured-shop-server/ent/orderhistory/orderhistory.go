// Code generated by ent, DO NOT EDIT.

package orderhistory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderhistory type in the database.
	Label = "order_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "order_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAddressID holds the string denoting the address_id field in the database.
	FieldAddressID = "address_id"
	// FieldOrderedAt holds the string denoting the ordered_at field in the database.
	FieldOrderedAt = "ordered_at"
	// FieldUserOrderNumber holds the string denoting the user_order_number field in the database.
	FieldUserOrderNumber = "user_order_number"
	// FieldOrderStatus holds the string denoting the order_status field in the database.
	FieldOrderStatus = "order_status"
	// FieldOrderTotalPrice holds the string denoting the order_total_price field in the database.
	FieldOrderTotalPrice = "order_total_price"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldPaymentInfo holds the string denoting the payment_info field in the database.
	FieldPaymentInfo = "payment_info"
	// FieldPaymentKey holds the string denoting the payment_key field in the database.
	FieldPaymentKey = "payment_key"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeUserAddre holds the string denoting the user_addre edge name in mutations.
	EdgeUserAddre = "user_addre"
	// EdgeOrderRows holds the string denoting the order_rows edge name in mutations.
	EdgeOrderRows = "order_rows"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "user_id"
	// UserAddressFieldID holds the string denoting the ID field of the UserAddress.
	UserAddressFieldID = "address_id"
	// OrderRowFieldID holds the string denoting the ID field of the OrderRow.
	OrderRowFieldID = "order_row_id"
	// Table holds the table name of the orderhistory in the database.
	Table = "order_history"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "order_history"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// UserAddreTable is the table that holds the user_addre relation/edge.
	UserAddreTable = "order_history"
	// UserAddreInverseTable is the table name for the UserAddress entity.
	// It exists in this package in order to avoid circular dependency with the "useraddress" package.
	UserAddreInverseTable = "user_address"
	// UserAddreColumn is the table column denoting the user_addre relation/edge.
	UserAddreColumn = "address_id"
	// OrderRowsTable is the table that holds the order_rows relation/edge.
	OrderRowsTable = "order_row"
	// OrderRowsInverseTable is the table name for the OrderRow entity.
	// It exists in this package in order to avoid circular dependency with the "orderrow" package.
	OrderRowsInverseTable = "order_row"
	// OrderRowsColumn is the table column denoting the order_rows relation/edge.
	OrderRowsColumn = "order_id"
)

// Columns holds all SQL columns for orderhistory fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldAddressID,
	FieldOrderedAt,
	FieldUserOrderNumber,
	FieldOrderStatus,
	FieldOrderTotalPrice,
	FieldPaymentMethod,
	FieldPaymentStatus,
	FieldPaymentInfo,
	FieldPaymentKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OrderHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAddressID orders the results by the address_id field.
func ByAddressID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressID, opts...).ToFunc()
}

// ByOrderedAt orders the results by the ordered_at field.
func ByOrderedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderedAt, opts...).ToFunc()
}

// ByUserOrderNumber orders the results by the user_order_number field.
func ByUserOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserOrderNumber, opts...).ToFunc()
}

// ByOrderStatus orders the results by the order_status field.
func ByOrderStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderStatus, opts...).ToFunc()
}

// ByOrderTotalPrice orders the results by the order_total_price field.
func ByOrderTotalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderTotalPrice, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByPaymentStatus orders the results by the payment_status field.
func ByPaymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentStatus, opts...).ToFunc()
}

// ByPaymentInfo orders the results by the payment_info field.
func ByPaymentInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentInfo, opts...).ToFunc()
}

// ByPaymentKey orders the results by the payment_key field.
func ByPaymentKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentKey, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserAddreField orders the results by user_addre field.
func ByUserAddreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAddreStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderRowsCount orders the results by order_rows count.
func ByOrderRowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderRowsStep(), opts...)
	}
}

// ByOrderRows orders the results by order_rows terms.
func ByOrderRows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderRowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newUserAddreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAddreInverseTable, UserAddressFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserAddreTable, UserAddreColumn),
	)
}
func newOrderRowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderRowsInverseTable, OrderRowFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderRowsTable, OrderRowsColumn),
	)
}
