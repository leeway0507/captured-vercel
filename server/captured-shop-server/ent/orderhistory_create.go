// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"product-server/ent/orderhistory"
	"product-server/ent/orderrow"
	"product-server/ent/user"
	"product-server/ent/useraddress"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderHistoryCreate is the builder for creating a OrderHistory entity.
type OrderHistoryCreate struct {
	config
	mutation *OrderHistoryMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ohc *OrderHistoryCreate) SetUserID(s string) *OrderHistoryCreate {
	ohc.mutation.SetUserID(s)
	return ohc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ohc *OrderHistoryCreate) SetNillableUserID(s *string) *OrderHistoryCreate {
	if s != nil {
		ohc.SetUserID(*s)
	}
	return ohc
}

// SetAddressID sets the "address_id" field.
func (ohc *OrderHistoryCreate) SetAddressID(s string) *OrderHistoryCreate {
	ohc.mutation.SetAddressID(s)
	return ohc
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ohc *OrderHistoryCreate) SetNillableAddressID(s *string) *OrderHistoryCreate {
	if s != nil {
		ohc.SetAddressID(*s)
	}
	return ohc
}

// SetOrderedAt sets the "ordered_at" field.
func (ohc *OrderHistoryCreate) SetOrderedAt(t time.Time) *OrderHistoryCreate {
	ohc.mutation.SetOrderedAt(t)
	return ohc
}

// SetUserOrderNumber sets the "user_order_number" field.
func (ohc *OrderHistoryCreate) SetUserOrderNumber(i int32) *OrderHistoryCreate {
	ohc.mutation.SetUserOrderNumber(i)
	return ohc
}

// SetOrderStatus sets the "order_status" field.
func (ohc *OrderHistoryCreate) SetOrderStatus(s string) *OrderHistoryCreate {
	ohc.mutation.SetOrderStatus(s)
	return ohc
}

// SetOrderTotalPrice sets the "order_total_price" field.
func (ohc *OrderHistoryCreate) SetOrderTotalPrice(i int32) *OrderHistoryCreate {
	ohc.mutation.SetOrderTotalPrice(i)
	return ohc
}

// SetPaymentMethod sets the "payment_method" field.
func (ohc *OrderHistoryCreate) SetPaymentMethod(s string) *OrderHistoryCreate {
	ohc.mutation.SetPaymentMethod(s)
	return ohc
}

// SetPaymentStatus sets the "payment_status" field.
func (ohc *OrderHistoryCreate) SetPaymentStatus(s string) *OrderHistoryCreate {
	ohc.mutation.SetPaymentStatus(s)
	return ohc
}

// SetPaymentInfo sets the "payment_info" field.
func (ohc *OrderHistoryCreate) SetPaymentInfo(s string) *OrderHistoryCreate {
	ohc.mutation.SetPaymentInfo(s)
	return ohc
}

// SetNillablePaymentInfo sets the "payment_info" field if the given value is not nil.
func (ohc *OrderHistoryCreate) SetNillablePaymentInfo(s *string) *OrderHistoryCreate {
	if s != nil {
		ohc.SetPaymentInfo(*s)
	}
	return ohc
}

// SetPaymentKey sets the "payment_key" field.
func (ohc *OrderHistoryCreate) SetPaymentKey(s string) *OrderHistoryCreate {
	ohc.mutation.SetPaymentKey(s)
	return ohc
}

// SetID sets the "id" field.
func (ohc *OrderHistoryCreate) SetID(s string) *OrderHistoryCreate {
	ohc.mutation.SetID(s)
	return ohc
}

// SetUser sets the "user" edge to the User entity.
func (ohc *OrderHistoryCreate) SetUser(u *User) *OrderHistoryCreate {
	return ohc.SetUserID(u.ID)
}

// SetUserAddreID sets the "user_addre" edge to the UserAddress entity by ID.
func (ohc *OrderHistoryCreate) SetUserAddreID(id string) *OrderHistoryCreate {
	ohc.mutation.SetUserAddreID(id)
	return ohc
}

// SetNillableUserAddreID sets the "user_addre" edge to the UserAddress entity by ID if the given value is not nil.
func (ohc *OrderHistoryCreate) SetNillableUserAddreID(id *string) *OrderHistoryCreate {
	if id != nil {
		ohc = ohc.SetUserAddreID(*id)
	}
	return ohc
}

// SetUserAddre sets the "user_addre" edge to the UserAddress entity.
func (ohc *OrderHistoryCreate) SetUserAddre(u *UserAddress) *OrderHistoryCreate {
	return ohc.SetUserAddreID(u.ID)
}

// AddOrderRowIDs adds the "order_rows" edge to the OrderRow entity by IDs.
func (ohc *OrderHistoryCreate) AddOrderRowIDs(ids ...int32) *OrderHistoryCreate {
	ohc.mutation.AddOrderRowIDs(ids...)
	return ohc
}

// AddOrderRows adds the "order_rows" edges to the OrderRow entity.
func (ohc *OrderHistoryCreate) AddOrderRows(o ...*OrderRow) *OrderHistoryCreate {
	ids := make([]int32, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderRowIDs(ids...)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohc *OrderHistoryCreate) Mutation() *OrderHistoryMutation {
	return ohc.mutation
}

// Save creates the OrderHistory in the database.
func (ohc *OrderHistoryCreate) Save(ctx context.Context) (*OrderHistory, error) {
	return withHooks(ctx, ohc.sqlSave, ohc.mutation, ohc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ohc *OrderHistoryCreate) SaveX(ctx context.Context) *OrderHistory {
	v, err := ohc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ohc *OrderHistoryCreate) Exec(ctx context.Context) error {
	_, err := ohc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohc *OrderHistoryCreate) ExecX(ctx context.Context) {
	if err := ohc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohc *OrderHistoryCreate) check() error {
	if _, ok := ohc.mutation.OrderedAt(); !ok {
		return &ValidationError{Name: "ordered_at", err: errors.New(`ent: missing required field "OrderHistory.ordered_at"`)}
	}
	if _, ok := ohc.mutation.UserOrderNumber(); !ok {
		return &ValidationError{Name: "user_order_number", err: errors.New(`ent: missing required field "OrderHistory.user_order_number"`)}
	}
	if _, ok := ohc.mutation.OrderStatus(); !ok {
		return &ValidationError{Name: "order_status", err: errors.New(`ent: missing required field "OrderHistory.order_status"`)}
	}
	if _, ok := ohc.mutation.OrderTotalPrice(); !ok {
		return &ValidationError{Name: "order_total_price", err: errors.New(`ent: missing required field "OrderHistory.order_total_price"`)}
	}
	if _, ok := ohc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "OrderHistory.payment_method"`)}
	}
	if _, ok := ohc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "OrderHistory.payment_status"`)}
	}
	if _, ok := ohc.mutation.PaymentKey(); !ok {
		return &ValidationError{Name: "payment_key", err: errors.New(`ent: missing required field "OrderHistory.payment_key"`)}
	}
	return nil
}

func (ohc *OrderHistoryCreate) sqlSave(ctx context.Context) (*OrderHistory, error) {
	if err := ohc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ohc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ohc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrderHistory.ID type: %T", _spec.ID.Value)
		}
	}
	ohc.mutation.id = &_node.ID
	ohc.mutation.done = true
	return _node, nil
}

func (ohc *OrderHistoryCreate) createSpec() (*OrderHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderHistory{config: ohc.config}
		_spec = sqlgraph.NewCreateSpec(orderhistory.Table, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	)
	if id, ok := ohc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ohc.mutation.OrderedAt(); ok {
		_spec.SetField(orderhistory.FieldOrderedAt, field.TypeTime, value)
		_node.OrderedAt = value
	}
	if value, ok := ohc.mutation.UserOrderNumber(); ok {
		_spec.SetField(orderhistory.FieldUserOrderNumber, field.TypeInt32, value)
		_node.UserOrderNumber = value
	}
	if value, ok := ohc.mutation.OrderStatus(); ok {
		_spec.SetField(orderhistory.FieldOrderStatus, field.TypeString, value)
		_node.OrderStatus = value
	}
	if value, ok := ohc.mutation.OrderTotalPrice(); ok {
		_spec.SetField(orderhistory.FieldOrderTotalPrice, field.TypeInt32, value)
		_node.OrderTotalPrice = value
	}
	if value, ok := ohc.mutation.PaymentMethod(); ok {
		_spec.SetField(orderhistory.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := ohc.mutation.PaymentStatus(); ok {
		_spec.SetField(orderhistory.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := ohc.mutation.PaymentInfo(); ok {
		_spec.SetField(orderhistory.FieldPaymentInfo, field.TypeString, value)
		_node.PaymentInfo = value
	}
	if value, ok := ohc.mutation.PaymentKey(); ok {
		_spec.SetField(orderhistory.FieldPaymentKey, field.TypeString, value)
		_node.PaymentKey = value
	}
	if nodes := ohc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserTable,
			Columns: []string{orderhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.UserAddreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.UserAddreTable,
			Columns: []string{orderhistory.UserAddreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderRowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderhistory.OrderRowsTable,
			Columns: []string{orderhistory.OrderRowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrow.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderHistoryCreateBulk is the builder for creating many OrderHistory entities in bulk.
type OrderHistoryCreateBulk struct {
	config
	err      error
	builders []*OrderHistoryCreate
}

// Save creates the OrderHistory entities in the database.
func (ohcb *OrderHistoryCreateBulk) Save(ctx context.Context) ([]*OrderHistory, error) {
	if ohcb.err != nil {
		return nil, ohcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ohcb.builders))
	nodes := make([]*OrderHistory, len(ohcb.builders))
	mutators := make([]Mutator, len(ohcb.builders))
	for i := range ohcb.builders {
		func(i int, root context.Context) {
			builder := ohcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ohcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ohcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ohcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ohcb *OrderHistoryCreateBulk) SaveX(ctx context.Context) []*OrderHistory {
	v, err := ohcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ohcb *OrderHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ohcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohcb *OrderHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ohcb.Exec(ctx); err != nil {
		panic(err)
	}
}
